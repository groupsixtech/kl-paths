PROGRAM frm_pad
%NOLOCKGROUP

--** USER MODIFY : Load user template
%include defaultpathfrm.klt

%include klevkeys.kl

%define prog_str 'frm_pad'

--user forms for defining main parameters
%define dict_file 'gspptheg'
%define dict_str 'PPTH'

--user forms for defining polygons
%define dict_file2 'gsppadeg'
%define dict_str2 'PPAD'
%define dict_file3 'gsphexeg'
%define dict_str3 'PHEX'
%define dict_file4 'gspcuseg'
%define dict_str4 'PCUS'

--dictionary constants
-- ..note:: generated by compressor
%include ppth.kl
%include ppad.kl

%include errors.klt
%include pathplan.klt
%include paths.c.klt
%include motion.klt

CONST
  SHP_PAD = 1
  SHP_HEX = 2
  SHP_CUST = 3

VAR
  path_val_arr : ARRAY[23] OF STRING[30]
  draw_val_arr : ARRAY[8] OF STRING[30]
  --tree views
  stationTree, rasterTree, motionTree : BOOLEAN
  station IN CMOS: INTEGER
  motion_type IN CMOS : INTEGER
  shapeType IN CMOS : INTEGER
  filename IN CMOS : STRING[12]
  orient : VECTOR
  --default start corner
  startCorner IN CMOS : INTEGER
  polyprm IN CMOS  : t_PATH_VARS
  toolprm IN CMOS  : t_TOOL_VARS
  rastprm IN CMOS  : t_PATH_RAST
  motnprm IN CMOS  : t_MOTION_PRM
  padprm  IN CMOS  : t_PAD_VARS
  hexprm IN CMOS   : t_HEX_VARS


  b : BOOLEAN
  term_char FROM forms : INTEGER

--helper functions
%from display.klh %import clear, show
%from paths.klh %import set_orientation
%from systemlib.klh %import VEC
%include forms.klh
%include errors.klh

%ifeq ENABLE_SCANNING TRUE
%include multitask.klh
%endif

--create objects for each workstation
---
pathswrapper_define(STATION1_NAME,STATION1_CNFG)

%ifdef STATION2_NAME
pathswrapper_define(STATION2_NAME,STATION2_CNFG)
%endif
%ifdef STATION3_NAME
pathswrapper_define(STATION3_NAME,STATION3_CNFG)
%endif
%ifdef STATION4_NAME
pathswrapper_define(STATION4_NAME,STATION4_CNFG)
%endif
---

%ifeq ENABLE_SCANNING TRUE
--create scanning object
define_scan_object(SCANNING_OBJECT_NAME,SCANNING_CNFG)
---
%endif

-- ** define form arrays
%include frm_pad.i.klt
make_path_indicies(prog_str)
make_pad_indicies(prog_str)

BEGIN
  --path parameters
  frm_pthList
  init_pthList

  --initalize parameters
  init_padList
  init_hexList

  -- *************

  --clear display
  display__clear

  --load forms
  b = forms__load(dict_file, dict_str)

  --show form
  forms__show(dict_str, path_val_arr)

  --conversions
  IF (toolprm.idod = 2) THEN
    toolprm.idod = -1
  ENDIF

  --start corner
  IF (toolprm.idod = -1) THEN
    rastprm.startCorner = startCorner
  ELSE
    SELECT (startCorner) OF
      CASE(LEFT_BOTTOM):
        rastprm.startCorner = RIGHT_BOTTOM
      CASE(RIGHT_BOTTOM):
        rastprm.startCorner = LEFT_BOTTOM
      CASE(LEFT_TOP):
        rastprm.startCorner = RIGHT_TOP
      CASE(RIGHT_TOP):
        rastprm.startCorner = LEFT_TOP
    ENDSELECT
  ENDIF

  --run program
  IF (term_char = ky_f2) THEN
    --show next form
    SELECT shapeType OF
      CASE(SHP_PAD):
        frm_padList
        b = forms__load(dict_file2, dict_str2)
        forms__show(dict_str2, draw_val_arr)
      CASE(SHP_HEX):
        frm_hexList
        b = forms__load(dict_file3, dict_str3)
        forms__show(dict_str3, draw_val_arr)
      CASE(SHP_CUST):
        frm_cusList
        b = forms__load(dict_file4, dict_str4)
        forms__show(dict_str4, draw_val_arr)
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT

    IF (term_char = ky_f2) THEN
%ifeq ENABLE_SCANNING TRUE
        CASE(MOVE_SCANING):
          orient = paths__set_orientation(toolprm.coordSys, toolprm.idod)
          orient = orient - VEC(polyprm.polyAngle, 0, 0)
          --load variables into scanning object
          `SCANNING_OBJECT_NAME`__init(toolprm.coordSys, 3, orient)
          --enable scanner
          IF NOT task__thread('SCANNING_OBJECT_NAME') THEN
              karelError(RUN_TASK_FAILED, 'scan task did not start',ER_ABORT)
          ENDIF
%endif
        --dry run toolpath
        ELSE:
      ENDSELECT
      
      --draw shape and raster
      --move through raster
      SELECT station OF
        CASE(1):
          frame_path_station_instructions(STATION1_NAME)
%ifdef STATION2_NAME
        CASE(2):
          frame_path_station_instructions(STATION2_NAME)
%endif
%ifdef STATION3_NAME
        CASE(3):
          frame_path_station_instructions(STATION3_NAME)
%endif
%ifdef STATION4_NAME
        CASE(4):
          frame_path_station_instructions(STATION4_NAME)
%endif
        ELSE:
          WRITE TPDISPLAY(CR, 'Workstation not selected properly')
          display__show
          ABORT
      ENDSELECT

      SELECT motion_type OF
        --scanning toolpath
%ifeq ENABLE_SCANNING TRUE
        CASE(MOVE_SCANING):
          IF (motion_type = MOVE_SCANING) THEN
            --stop scanning process
            `SCANNING_OBJECT_NAME`__set_scan_finished
          ENDIF
%endif
        --dry run toolpath
        ELSE:
      ENDSELECT

    ELSE
      WRITE TPDISPLAY(CR, 'Must hit RUN on form to continue')
      WRITE TPDISPLAY(CR, 'Shift should not be held down.')
      display__show
      ABORT
    ENDIF
  ELSE
    WRITE TPDISPLAY(CR, 'Must hit NEXT on form to continue.')
    WRITE TPDISPLAY(CR, 'Shift should not be held down.')
    display__show
    ABORT
  ENDIF



END frm_pad