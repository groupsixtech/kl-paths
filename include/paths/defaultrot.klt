--import robot group settings
%include defaultpath.klt

%define PATH_CONFIG_FILENAME defaultrot.klt

%define PATH_DATA_TYPE t_NODE
%define PATH_DATA_NAME v
%define PATH_NODE_TYPE VECTOR

--rotary group
%define ROT_GRP 2
--frames
%define USER_FRAME_NO 2
%define TOOL_FRAME_NO 3

--rotary parameters
%define ROT_NUM_OF_AXES 1
%define ROT_DRIVING_AXIS 1 
%define ROT_DIRECTION -1

--programs
%define LINEAR_MOVE_PROG 'MOVE_LINE_ROT'
%define ARC_MOVE_PROG 'MOVE_CIRC_ROT'

--dynamic userframe variables
%define CD_PAIR 1
%define LEADER_FRM 1
%define DEFAULT_LEADER POS(0,0,0,180,0,180, (ZEROPOS(1).Config_data))

%defeval DEFAULT_POSE new_pose(0,0,0,0,0,0,0, DEFAULT_CONFIG)
--tool orientation
%define TOOL_ORIENT_UP 0,0,0
%define TOOL_ORIENT_DOWN 0,0,180

%mode push
%mode string QQQ "`" "`" "\\"

%define define_paths_types(type_name, parent) `TYPE
  t_ROTARY FROM parent = JOINTPOS`ROT_NUM_OF_AXES` IN GROUP[ROT_GRP]

  type_name FROM parent = STRUCTURE
    pose : XYZWPR IN GROUP[RBT_GRP]
    rot  : t_ROTARY
  ENDSTRUCTURE`

%define define_paths_headers(parent) `declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1 : REAL; cnfg : STRING) : PATH_DATA_TYPE FROM parent
declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : PATH_DATA_TYPE FROM parent
declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : PATH_DATA_TYPE; reg_no : INTEGER) FROM parent
declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : PATH_DATA_TYPE; nde2 : PATH_DATA_TYPE) : PATH_DATA_TYPE FROM parent
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : PATH_DATA_TYPE) : PATH_DATA_TYPE FROM parent
`

%define define_paths_members(parent) `declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1 : REAL; cnfg : STRING) : PATH_DATA_TYPE
  VAR
    i : INTEGER
    nde : PATH_DATA_TYPE
    arr: ARRAY[ROT_NUM_OF_AXES] OF REAL
  BEGIN
    nde.pose = POS(x,y,z,w,p,r, pose__set_config(cnfg)) 
    nde.rot = pose__set_jointpos_axis(ROT_DRIVING_AXIS, j1)

    RETURN( nde )
  END new_pose
declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : PATH_DATA_TYPE
  VAR
    deg : REAL
    p : PATH_DATA_TYPE
  BEGIN
    IF (idod_ = -1) THEN deg = nde.v.r-180 ; ELSE deg = nde.v.r ; ENDIF
    p.pose = nde.v
    p.rot = pose__set_jointpos_axis(ROT_DRIVING_AXIS, ROT_DIRECTION*deg )
    RETURN(p)
  END tpath2pos
declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : PATH_DATA_TYPE; reg_no : INTEGER)
  BEGIN
    pose__set_posreg_xyz(nde.pose, reg_no, RBT_GRP)
    pose__set_posreg_joint((nde.rot), reg_no, ROT_GRP)
  END set_posereg
declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : PATH_DATA_TYPE; nde2 : PATH_DATA_TYPE) : PATH_DATA_TYPE
  VAR
    p : PATH_DATA_TYPE
  BEGIN
    p.pose = nde1.pose:nde2.pose
    p.rot = nde1.rot
    RETURN(p)
  END poseMul
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : PATH_DATA_TYPE) : PATH_DATA_TYPE
  VAR
    p : PATH_DATA_TYPE
  BEGIN
    p.pose = INV((nde1.pose))
    p.rot = nde1.rot
    RETURN(p)
  END poseInv
`
%mode pop
