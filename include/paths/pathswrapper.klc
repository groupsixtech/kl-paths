PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'paths wrapper'
%NOLOCKGROUP

%include namespace.m

%include systemlib.klt
%include systemvars.klt
%include draw.klt
%include pathplan.klt
%include paths.klt
%include motion.klt

%ifdef define_paths_types
define_paths_types(PATH_DATA_TYPE, PATH_OBJECT_NAME)
%endif

%define BASE_CLASSNAME class_name

VAR
  origin : XYZWPR
  tool : XYZWPR
  bbox : t_RECT
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH
  path_plan : PATH nodedata = t_INTEGER
  pth : PATH nodedata = t_TOOLPATH

%from systemlib.klh %import VEC, VEC2D
%include pose.klh
%from math.klh %import bitmask
%from registers.klh %import set_real, set_int
%include paths.klh

--define objects
  --polygon
define_draw_obj(DRAW_OBJECT_NAME,PATH_WRAPPER_CONFIG_NAME)
  --paths
paths_object_define(PATH_OBJECT_NAME,PATH_WRAPPER_CONFIG_NAME)
define_paths_headers(PATH_OBJECT_NAME)

%defeval class_name BASE_CLASSNAME

%include pathswrapper.klh
%include pathswrapper.private.klh

--private
ROUTINE clear_plan
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(path_plan)
    WHILE PATH_LEN(path_plan) > 0 DO
		  DELETE_NODE(path_plan,i,status)
      i = i - 1
	  ENDWHILE
  END clear_plan

ROUTINE createPath
  VAR
    cds : t_COORD_SYS
    p : XYZWPR
    v : VECTOR
  BEGIN
    --initialize path
      --coordinate system
    cds = paths__new_coord_sys((toolprm.coordSys), 3)
      --define tool offset
    SELECT (toolprm.coordSys) OF
      CASE(PTH_CARTESAN):
        v = VEC(TOOL_ORIENT_UP)
      CASE(PTH_CYLINDER):
        IF (toolprm.idod = -1) THEN
          v = VEC(TOOL_ORIENT_UP)
        ELSE
          v = VEC(TOOL_ORIENT_DOWN)
        ENDIF
      ELSE:
    ENDSELECT

      --set tool pitch
    v.x = v.x + toolprm.pitch
      --set tool
    tool = POS(0,0,0,v.x,v.y,v.z,pose__set_config(DEFAULT_CONFIG))

      --object origin
    p = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    
    `PATH_OBJECT_NAME`__init(p, tool, cds)
    `PATH_OBJECT_NAME`__set_idod((toolprm.idod))
    
    --generate path
    origin = POS((polyprm.xStart), (polyprm.yStart), (polyprm.height), 0,0,0, pose__set_config(DEFAULT_CONFIG))
    `PATH_OBJECT_NAME`__createPath(lines, contours, origin, (rastprm.startCorner), (rastprm.rastType), (rastprm.constrain))
  END createPath

ROUTINE raster
  BEGIN
    --get raster lines
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    `DRAW_OBJECT_NAME`__set_params((rastprm.angle), (rastprm.dir), (rastprm.contours), & 
                                   (rastprm.line_width), (rastprm.overlap) )
    `DRAW_OBJECT_NAME`__raster(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    
    --get lines from object
    `DRAW_OBJECT_NAME`__lines_to_vec_path(lines) ;
    `DRAW_OBJECT_NAME`__contours_to_vec_path(contours) ;
    --get bounding box
    bbox = `DRAW_OBJECT_NAME`__get_bounding_box

  END raster

ROUTINE move
  BEGIN
    --move though path
    IF (motnprm.use_arc) THEN
%ifeq GENERATE_FULL_PATH TRUE
      `PATH_OBJECT_NAME`__movePolyArcFull((motnprm.tool_speed), (motnprm.tool_step), (motnprm.link_speed), (motnprm.link_step), -1*(toolprm.retractDist) )
%else
      `PATH_OBJECT_NAME`__movePolyArc((motnprm.tool_speed), (motnprm.tool_step), (motnprm.link_speed), (motnprm.link_step), -1*(toolprm.retractDist) )
%endif
    ELSE
%ifeq GENERATE_FULL_PATH TRUE
      `PATH_OBJECT_NAME`__movePolyFull((motnprm.tool_speed), (motnprm.tool_step), (motnprm.link_speed), (motnprm.link_step), -1*(toolprm.retractDist) )
%else
      `PATH_OBJECT_NAME`__movePoly((motnprm.tool_speed), (motnprm.tool_step), (motnprm.link_speed), (motnprm.link_step), -1*(toolprm.retractDist) )
%endif
    ENDIF

%ifeq GENERATE_FULL_PATH TRUE
    --get path objects for vizualization tools
    -- ..note:: Do here as path obejct are overwritten during
    --          unravel
    `PATH_OBJECT_NAME`__get_plan(path_plan)
    `PATH_OBJECT_NAME`__get_path(pth)
%endif

%ifndef ROT_GRP
    --unravel if cylindrical
    IF (toolprm.coordSys=PTH_CYLINDER) THEN
      `PATH_OBJECT_NAME`__get_line(1, TRUE, TRUE, origin, PTH_LINKING, (motnprm.link_step), FALSE)
      IF (motnprm.use_arc) THEN
        `PATH_OBJECT_NAME`__moveArc((motnprm.link_speed))
      ELSE
        `PATH_OBJECT_NAME`__moveLine((motnprm.link_speed))
      ENDIF
    ENDIF
%endif

  END move


--public

ROUTINE destructor
  BEGIN
%ifeq GENERATE_FULL_PATH TRUE
    --pause for visualization before releasing memory
    PAUSE
%endif
    --clear wrapper members
    paths__clear_vecpath(contours)
    paths__clear_vecpath(lines)
    paths__clear_toolpath(pth)
    clear_plan
    --clear draw object
    `DRAW_OBJECT_NAME`__clear
    --clear path object
    `PATH_OBJECT_NAME`__destructor
  END destructor

ROUTINE make
  VAR
    status : INTEGER
  BEGIN
    --lock groups
%ifdef ROT_GRP
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP), status)
%else
    LOCK_GROUP(math__bitmask(RBT_GRP),status)
%endif

    --set frames
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
%ifdef ROT_GRP
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)
%endif

    --path plan
    createPath(polyprm, toolprm, rastprm)

    --move through path
    move(toolprm, motnprm)

%ifdef ROT_GRP
    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP), status)
%else
    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)
%endif

  END make

ROUTINE drawPad
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__new
    `DRAW_OBJECT_NAME`__pads(padprm.width, padprm.length, padprm.separation, padprm.no_of_pads, VEC2D(0,0))

    --raster shape
    raster(toolprm, rastprm)

    --free memory from draw
    `DRAW_OBJECT_NAME`__clear

  END drawPad

ROUTINE drawHex
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__new
    `DRAW_OBJECT_NAME`__hexagon((hexprm.radius), (hexprm.points), VEC2D(0, 0), (polyprm.polyAngle))

    --raster shape
    raster(toolprm, rastprm)

    --free memory from draw
    `DRAW_OBJECT_NAME`__clear

  END drawHex

ROUTINE drawCustom
  VAR
    p : XYZWPR
  BEGIN

    --draw pads
    `DRAW_OBJECT_NAME`__new
    p = POS(0,0,0,0,0,(polyprm.polyAngle),pose__set_config(DEFAULT_CONFIG))
    `DRAW_OBJECT_NAME`__set_canvas(p)
    `DRAW_OBJECT_NAME`__import_shape('FR:\' + filename + '.csv')

    --raster shape
    raster(toolprm, rastprm)

    --free memory from draw
    `DRAW_OBJECT_NAME`__clear

  END drawCustom

BEGIN
END class_name