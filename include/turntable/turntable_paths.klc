PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'turntable paths'
%NOLOCKGROUP
%UNINITVARS

%include namespace.m

-- declare type
%include define_type.m

%include errors.klt
%include math.klt
%include pose.klt
%include turntable.klt

--print user defined struct
%ifdef path_type_define
path_type_define(t_node, class_name)
%endif

%from errors.klh %import karelError, CHK_STAT
%from math.klh %import translate, rotz
%from matrix.klh %import add_1D, zeros_1D
%from pose.klh %import set_jointpos, cylindrical_to_cartesian
%from strings.klh %import vec_to_s, r_to_s, rarr_to_s
%include turntable_paths.private.klh
%include turntable_paths.klh

-- ** private **
ROUTINE check_tidx
  BEGIN
    IF UNINIT(idx.j) THEN idx.j = 0 ; ENDIF
    IF (idx.j) >= 255 THEN idx.j = 0 ; ENDIF
    IF UNINIT(idx.k) THEN idx.k = 0 ; ENDIF
    IF (idx.k) >= 255 THEN idx.k = 0 ; ENDIF
    IF UNINIT(idx.l) THEN idx.l = 0 ; ENDIF
    IF (idx.l) >= 255 THEN idx.l = 0 ; ENDIF
  END check_tidx

ROUTINE check_tpad
 BEGIN
  IF UNINIT(p.radius) THEN
    karelError(VAR_UNINIT,'in tPad type: radius must be set', ER_ABORT)
  ELSE IF (p.radius = 0) THEN
    karelError(VAR_UNINIT,'in tPad type: radius must be set', ER_ABORT)
  ENDIF
  ENDIF
  IF UNINIT(p.idod) THEN
    p.idod = 1
  ENDIF
  IF (p.idod <> -1) AND (p.idod <> 1) THEN
    karelError(VAR_UNINIT,'in tPad type: idod must be set to 1, or -1', ER_ABORT)
  ENDIF
  IF UNINIT(p.ccw) THEN
    p.ccw = 1
  ENDIF
  IF (p.ccw <> -1) AND (p.ccw <> 1) THEN
    karelError(VAR_UNINIT,'in tPad type: ccw must be set to 1, or -1', ER_ABORT)
  ENDIF
  --default increments is 4
  IF UNINIT(p.increments) THEN
    p.increments = 4
  ELSE IF (p.increments = 0) THEN
    karelError(VAL_OUT_OF_RNG,'increments cannot be 0', ER_ABORT)
  ENDIF
  ENDIF
  IF UNINIT(p.passes) THEN
    p.passes = 1
  ELSE IF (p.passes = 0) THEN
    karelError(VAL_OUT_OF_RNG,'passes cannot be 0', ER_ABORT)
  ENDIF
  ENDIF
  IF UNINIT(p.pockets) THEN
    p.pockets = 1
  ELSE IF (p.pockets >= 255) THEN
    p.pockets = 1
  ELSE IF (p.pockets = 0) THEN
    karelError(VAL_OUT_OF_RNG,'pockets cannot be 0', ER_ABORT)
  ENDIF
  ENDIF
  ENDIF
  IF UNINIT(p.pad_offset)  THEN
    p.pad_offset = 0
  ENDIF
  IF UNINIT(p.pass_offset)  THEN
    p.pass_offset = 0
  ENDIF

  IF UNINIT(p.start_z) THEN
    karelError(VAR_UNINIT,'in tPad type: start_z must be set', ER_ABORT)
  ENDIF
  IF UNINIT(p.start_deg) THEN
    karelError(VAR_UNINIT,'in tPad type: start_deg must be set', ER_ABORT)
  ENDIF
  -- must set overlap if passes > 1
  IF UNINIT(p.overlap) AND (p.passes > 1) THEN
    karelError(VAR_UNINIT,'in tPad type: overlap must be set', ER_ABORT)
  ENDIF
  IF UNINIT(p.overlap) AND (p.passes <= 1) THEN
    p.overlap = 0
  ENDIF
  IF UNINIT(p.width_rot) THEN
    karelError(VAR_UNINIT,'in tPad type: width_rot must be set', ER_ABORT)
  ELSE IF (p.width_rot = 0) THEN
    karelError(VAR_UNINIT,'in tPad type: width_rot must be set', ER_ABORT)
  ENDIF
  ENDIF

 END check_tpad

-- ** public **

-- *** path handlers

ROUTINE clear
  VAR
    status : INTEGER
  BEGIN
    WHILE PATH_LEN(out_path) > 0 DO
		  DELETE_NODE(out_path,1,status)
	  ENDWHILE
  END clear

ROUTINE append
  VAR
    length : INTEGER
    status : INTEGER
  BEGIN
    APPEND_NODE(out_path,status)
    CHK_STAT(status)
		length = PATH_LEN(out_path)
    out_path[length] = n
  END append


ROUTINE mask_rotary_axis
  VAR
    status : INTEGER
    start_arr : ARRAY[ROT_AXES] OF REAL
    offset_arr : ARRAY[ROT_AXES] OF REAL
  BEGIN
    CNV_JPOS_REL(start_pos, start_arr, status)
    matrix__zeros_1D(offset_arr)
    offset_arr[ROTARY_JNT] = offset
    matrix__add_1D(start_arr, offset_arr, offset_arr)

    RETURN(pose__set_jointpos(offset_arr))

  END mask_rotary_axis

%endif
    RETURN(origin)
  END set_path_origin

-- *** paths

ROUTINE npad
  VAR 
    i, j, k : INTEGER
    pthlen : INTEGER
    status : INTEGER
    ang : REAL
    rotary : ARRAY[ROT_AXES] OF REAL
    origin_rot : ARRAY[ROT_AXES] OF REAL
    posei : t_node
    trans : VECTOR
  BEGIN
    --get current length of path
    pthlen = PATH_LEN(out_path)
    IF (pthlen = 0) OR UNINIT(pthlen) THEN
      pthlen = 1
    ENDIF

    --make sure ref position has config
    IF UNINIT(origin.t_xyz.config_data) THEN
      karelError(INVALID_CONFIG,'npad : origin must have configuration', ER_ABORT)
    ENDIF

    --check start indicies
    check_tidx(startInd)

    --check params type
    check_tpad(params)

    --make radius vector
    params.radius = ABS(params.radius)
    trans.x = 0 ; trans.y = params.radius*params.idod ; trans.z = params.start_z ;
    ang = 0

    --initialize rotary
    matrix__zeros_1D(rotary)
    --convert origin rotary position to array
    CNV_JPOS_REL(origin.t_joint, origin_rot, status)
    CHK_STAT(status)
    
    k=startInd.k
    WHILE k < params.pockets DO
      j=startInd.j
      WHILE j < params.passes DO
        --update pass
        trans.z = params.start_z + j*params.overlap

        i = 0
        WHILE i < params.increments DO
          --calcuate increment angle
          ang = params.start_deg + (params.width_rot*i/params.increments+params.pad_offset*k+params.pass_offset*j)*params.ccw
          --update robot position
          --multiply angle by -1 to keep head stationary as rotary
          --axis rotates
          posei.t_xyz = pose__cylindrical_to_cartesian(origin.t_xyz, (-1*ang), trans.y, trans.z)
          --copy configuration
          posei.t_xyz.config_data = origin.t_xyz.config_data
          -- update turntable
          rotary[ROTARY_JNT] = ang*params.ccw
          --convert and add to origin jointpos
          matrix__add_1D(rotary, origin_rot, rotary)
          posei.t_joint = pose__set_jointpos(rotary)
          --add pose to path
          APPEND_NODE(out_path, status)
          out_path[pthlen] = posei
          --increment path length
          pthlen = pthlen + 1

          i = i + 1
        ENDWHILE
        j = j + 1
      ENDWHILE
      k = k + 1
    ENDWHILE

  END npad

BEGIN
END class_name