PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'lam'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include lam.klt

VAR
  lsrprm : t_LASER
  powprm : t_POWDER
  powder_names : ARRAY[NUMBER_OF_POWDERS] OF STRING[20]
  depth_maps   : ARRAY[NUMBER_OF_POWDERS] OF t_DEPTHREGR

%from registers.klh %import set_real, set_int
%include lam.klh

--private
  -- user macro
define_powder_names
  -- user macro
define_pow_params
  -- user macro
define_depth_maps

--public

ROUTINE new
  BEGIN
    powderNames
    initDepthMap
  END new

ROUTINE init
  BEGIN
    powderNames
    initDepthMap

    --laser parameters reference
    lsrprm = laserprm_

    --powder parameters reference
    powprm = powderprm_

    --update
    initPowParam(powder_type, override)

  END init

ROUTINE delete
  VAR
    uninit_las : t_LASER
    uninit_pow : t_POWDER
  BEGIN
    lsrprm = uninit_las
    powprm = uninit_pow
  END delete

ROUTINE getSpeedFromDepth
  VAR
    speed : REAL
  BEGIN
    IF powder = 0 THEN
      -- use internally set powder
      powder = powprm.powder
    ENDIF

    speed = depth_maps[powder].slope*depth + depth_maps[powder].intercept

    --clip speed on testing bounds
    IF speed > depth_maps[powder].high_limit THEN
      speed = depth_maps[powder].high_limit
    ELSE IF speed < depth_maps[powder].low_limit THEN
      speed = depth_maps[powder].low_limit
    ENDIF 
    ENDIF

    RETURN(speed)
  END getSpeedFromDepth

ROUTINE set_laser_power
  BEGIN
    lsrprm.power = power
  END set_laser_power

ROUTINE set_powder_params
  BEGIN
    powprm.hopper = hopper ; powprm.powder = powder ; 
    powprm.rpm = rpm ; powprm.lpm = lpm ; powprm.flow_rate = flow_rate ;
    powprm.height = height ;
  END set_powder_params

ROUTINE set_registers
  BEGIN
    --laser params
    registers__set_int(LASER_POWER_REG, (lsrprm.power))
    --powder params: 1 - Hopper 1, 2 - Hopper 2, 3 - Hopper 1/2 blend
    registers__set_int(POWDER_HOPPER_REG, (powprm.hopper))

    IF powprm.hopper = 1 THEN
      --hopper 1 parameters
      registers__set_real(POWDER1_SPEED_REG,     (powprm.rpm))
      registers__set_real(POWDER1_GASF_REG,      (powprm.lpm))
      registers__set_real(POWDER1_FLOW_RATE_REG, (powprm.flow_rate))
      registers__set_real(POWDER1_THICKNESS_REG, (powprm.height))
    ELSE IF powprm.hopper = 2 THEN
      --hopper 2 parameters
      registers__set_real(POWDER2_SPEED_REG,     (powprm.rpm))
      registers__set_real(POWDER2_GASF_REG,      (powprm.lpm))
      registers__set_real(POWDER2_FLOW_RATE_REG, (powprm.flow_rate))
      registers__set_real(POWDER2_THICKNESS_REG, (powprm.height))
    ENDIF
    ENDIF

  END set_registers

ROUTINE start
  BEGIN
    --enable laser
    CALL_PROG(LASER_ENABLE_PROG, 0)
    --enable extruder
    CALL_PROG(EXTRUDER_START_PROG, 0)

  END start

ROUTINE stop
  BEGIN
    --disable extruder
    CALL_PROG(EXTRUDER_STOP_PROG, 0)
    --disable laser
    CALL_PROG(LASER_DISABLE_PROG, 0)
  END stop

BEGIN
END class_name