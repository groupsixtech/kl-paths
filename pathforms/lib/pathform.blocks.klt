%mode push
%mode string QQQ "$" "$" "\\"


--headers for station objects
%define declare_stations $
%ifdef STATION1_CNFG
path_make_define(STATION1_PATH,STATION1_CNFG)
path_motion_define(STATION1_MOTION,STATION1_CNFG)
%endif
%ifdef STATION2_CNFG
path_make_define(STATION2_PATH,STATION2_CNFG)
path_motion_define(STATION2_MOTION,STATION2_CNFG)
%endif
%ifdef STATION3_CNFG
path_make_define(STATION3_PATH,STATION3_CNFG)
path_motion_define(STATION3_MOTION,STATION3_CNFG)
%endif
%ifdef STATION4_CNFG
path_make_define(STATION4_PATH,STATION4_CNFG)
path_motion_define(STATION4_MOTION,STATION4_CNFG)
%endif
$

-- **** NEW ****
%define initialize_new_stations(MOTION_NAME,LAYER_NAME) $
    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    makeparams = paths__new_make_params(frm, toolprm.coordSys, origin, (toolprm.idod), TRUE)
    layerparams = paths__new_layer_params(start_pass, start_layer)

    `LAYER_NAME`__new(layerparams, makeparams, mtnprm, toolprm)
$

%define initialize_stations(MOTION_NAME,PATH_NAME) $
    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    `PATH_NAME`__init(frm, toolprm.coordSys, origin, (toolprm.idod), TRUE)
    --intialize motion friend class
      --tool offset, interpolate flag, program type
    `MOTION_NAME`__init2(motnprm, toolprm, (makeparams.origin.z))
    --intialize LAM object
    `LAM_NAME`__init(lsrprm, powprm)
$
-- *********

-- **** OLD ****
--constructors for station objects
%define initialize_select_stations $
    SELECT station OF
      CASE(1):
        initialize_stations(STATION1_MOTION,STATION1_PATH)
%ifdef STATION2_CNFG
      CASE(2):
        initialize_stations(STATION2_MOTION,STATION2_PATH)
%endif
%ifdef STATION3_CNFG
      CASE(3):
        initialize_stations(STATION3_MOTION,STATION3_PATH)
%endif
%ifdef STATION4_CNFG
      CASE(4):
        initialize_stations(STATION4_MOTION,STATION4_PATH)
%endif
      ELSE:
        WRITE TPDISPLAY(CR, 'Workstation not selected properly')
        display__show
        ABORT
    ENDSELECT
$
-- *********

-- **** NEW ****
%define station_run(MOTION_NAME,LAYER_NAME) $
    `LAYER_NAME`__run
$
-- *********

-- **** OLD ****
%define station_move(MOTION_NAME,MAKE_NAME) $
    `MOTION_NAME`__aquire_groups
    `MOTION_NAME`__move(use_arc)
    `MOTION_NAME`__release_groups
$
-- *********

--move through the path with the selected station
%define station_select_move $
    SELECT station OF
      CASE(1):
        --pathplan
        -- **fix** **removed** use pathplan->planPath in `next layer`
        --`STATION1_MOTION`__createPath(lines, contours, rastprm)

        --run path
        station_move(STATION1_MOTION,STATION1_LAYER)
%ifdef STATION2_CNFG
      CASE(2):
        --pathplan
        -- **fix** **removed** use pathplan->planPath in `next layer`
        --`STATION2_MOTION`__createPath(lines, contours, rastprm)

        --run path
        station_move(STATION2_MOTION,STATION2_LAYER)
%endif
%ifdef STATION3_CNFG
      CASE(3):
        --pathplan
        -- **fix** **removed** use pathplan->planPath in `next layer`
        --`STATION3_MOTION`__createPath(lines, contours, rastprm)

        --run path
        station_move(STATION3_MOTION,STATION3_LAYER)
%endif
%ifdef STATION4_CNFG
      CASE(4):
        --pathplan
        -- **fix** **removed** use pathplan->planPath in `next layer`
        --`STATION4_MOTION`__createPath(lines, contours, rastprm)

        --run path
        station_move(STATION4_MOTION,STATION4_LAYER)
%endif
      ELSE:
        ABORT
    ENDSELECT
$

--destructors for station objects
%define delete_station(MOTION_NAME,MAKE_NAME) $
  `MOTION_NAME`__delete
  `MAKE_NAME`__delete
  `LAM_NAME`__delete
$

%define delete_station_select $
    SELECT station OF
      CASE(1):
        delete_station(STATION1_MOTION,STATION1_PATH)
%ifdef STATION2_CNFG
      CASE(2):
        delete_station(STATION2_MOTION,STATION2_PATH)
%endif
%ifdef STATION3_CNFG
      CASE(3):
        delete_station(STATION3_MOTION,STATION3_PATH)
%endif
%ifdef STATION4_CNFG
      CASE(4):
        delete_station(STATION4_MOTION,STATION4_PATH)
%endif
      ELSE:
        ABORT
    ENDSELECT
$

--select the proper start corner if ID or OD is
--selected in previous form
%define default_start_corner $
    SELECT station OF
      CASE(1):
        --**fix** pathPlan is called in pathlayer defer to
        --        pathlayer
        startCorner = `STATION1_PATH`__get_corner(toolprm.idod)
%ifdef STATION2_CNFG
      CASE(2):
        --**fix** pathPlan is called in pathlayer defer to
        --        pathlayer
        startCorner = `STATION2_PATH`__get_corner(toolprm.idod)
%endif
%ifdef STATION3_CNFG
      CASE(3):
        --**fix** pathPlan is called in pathlayer defer to
        --        pathlayer
        startCorner = `STATION3_PATH`__get_corner(toolprm.idod)
%endif
%ifdef STATION4_CNFG
      CASE(4):
        --**fix** pathPlan is called in pathlayer defer to
        --        pathlayer
        startCorner = `STATION4_PATH`__get_corner(toolprm.idod)
%endif
      ELSE:
        ABORT
    ENDSELECT
$

%define default_tool_orientation $
    IF default_wpr THEN
      SELECT station OF
        CASE(1):
          -- **fix** can get `orient` from `params` in pathlayer
          toolprm.orient = paths__vec_to_toolvec(`STATION1_PATH`__get_tool_orient(toolprm.idod))
%ifdef STATION2_CNFG
        CASE(2):
          -- **fix** can get `orient` from `params` in pathlayer
          toolprm.orient = paths__vec_to_toolvec(`STATION2_PATH`__get_tool_orient(toolprm.idod))
%endif
%ifdef STATION3_CNFG
        CASE(3):
          -- **fix** can get `orient` from `params` in pathlayer
          toolprm.orient = paths__vec_to_toolvec(`STATION3_PATH`__get_tool_orient(toolprm.idod))
%endif
%ifdef STATION4_CNFG
        CASE(4):
          -- **fix** can get `orient` from `params` in pathlayer
          toolprm.orient = paths__vec_to_toolvec(`STATION4_PATH`__get_tool_orient(toolprm.idod))
%endif
        ELSE:
          ABORT
      ENDSELECT
    ENDIF 
$

--initialize coordinate frame, drawing frame, and set coordinate system
%define initialize_frames $
    -- ** set frames **
    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    -- ..note:: tool offset is defined in motion constructor
    --          under the `define_tool_offset` member
    origin = POS((polyprm.xStart), (polyprm.yStart), (polyprm.height), (polyprm.polyAngle*toolprm.idod),0,0, pose__set_config(DEFAULT_CONFIG))
    --set coordinate system
    SELECT (toolprm.coordSys.system) OF
      CASE(PTH_CYLINDER):
        --force vert axis
        toolprm.coordSys.z_axis = VERT_AXES
      CASE(PTH_CARTESAN):
        --force z axis
        toolprm.coordSys.z_axis = Z_AXES
      ELSE:
        WRITE TPDISPLAY(CR, 'coordinate system not set')
        display__show
    ENDSELECT
$

--set registers and start lam
%define start_lam $
    `LAM_NAME`__set_registers
    `LAM_NAME`__start
$

%define stop_lam $
    `LAM_NAME`__stop
$

--initialize and start scanner
%define start_scanning $
    --load variables into scanning object
    -- ..note:: `orient` is unused in scan_part_dyn. Need to make seperate
    --          header file to exclude this parameter
    `SCANNING_OBJECT_NAME`__init((toolprm.coordSys.system), (toolprm.coordSys.z_axis), VEC(0,0,0))
    --enable scanner
    IF NOT task__thread('SCANNING_OBJECT_NAME') THEN
        karelError(RUN_TASK_FAILED, 'scan task did not start',ER_ABORT)
    ENDIF
$

%define stop_scanning $
    IF (program_type = MOVE_SCANING) THEN
      --stop scanning process
      `SCANNING_OBJECT_NAME`__set_scan_finished
    ENDIF
$

--form branch for subform of whichever 'Shape'
--is selected in station form
%define load_shape_form $
    SELECT shapeType OF
      CASE(SHP_PAD):
        frm_padList
        --set unused parameters
        def_padList
        b = forms__load(pad_file, pad_str)
        forms__show(pad_str, draw_val_arr)
      CASE(SHP_HEX):
        frm_hexList
        b = forms__load(hex_file, hex_str)
        forms__show(hex_str, draw_val_arr)
      CASE(SHP_CUST):
        frm_cusList
        b = forms__load(cus_file, cus_str)
        forms__show(cus_str, draw_val_arr)
      CASE(SHP_REBUILD):
        --set unused parameters
        def_rbdList
        frm_rbdList
        b = forms__load(rebuild_file, rebuild_str)
        forms__show(rebuild_str, draw_val_arr)
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT
$

-- draw object from whichever shape is selected
%define draw_shape_form $
    -- **fix** This should be deferred to the layer object
    SELECT shapeType OF
      CASE(SHP_PAD):
        --set canvas origin/perspective
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (toolprm.coordSys.system), 0, (polyprm.polyRotation))
        `PATHDRAW_NAME`__drawPad(padprm, polyprm, rastprm, layer)
        `PATHDRAW_NAME`__raster(rastprm)
      CASE(SHP_HEX):
        --set canvas origin/perspective. polyRotation is handled in polygon__hexagon.
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (toolprm.coordSys.system), 0, 0)
        `PATHDRAW_NAME`__drawHex(hexprm, polyprm, rastprm)
        `PATHDRAW_NAME`__raster(rastprm)
      CASE(SHP_CUST):
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (toolprm.coordSys.system), 0, (polyprm.polyRotation))
        `PATHDRAW_NAME`__drawCustom(filename, polyprm, rastprm)
        `PATHDRAW_NAME`__raster(rastprm)
      CASE(SHP_REBUILD):
        --initialize layout and load file & buffer
        --defer, no drawing object needed
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT
    -- **fix** end
$

%mode pop