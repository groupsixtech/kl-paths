%mode push
%mode string QQQ "`" "`" "\\"


--headers for station objects
%define declare_stations `
%ifdef STATION1_CNFG
path_make_define(STATION1_PATH,STATION1_CNFG)
path_motion_define(STATION1_MOTION,STATION1_CNFG)
%endif
%ifdef STATION2_CNFG
path_make_define(STATION2_PATH,STATION2_CNFG)
path_motion_define(STATION2_MOTION,STATION2_CNFG)
%endif
%ifdef STATION3_CNFG
path_make_define(STATION3_PATH,STATION3_CNFG)
path_motion_define(STATION3_MOTION,STATION3_CNFG)
%endif
%ifdef STATION4_CNFG
path_make_define(STATION4_PATH,STATION4_CNFG)
path_motion_define(STATION4_MOTION,STATION4_CNFG)
%endif
`

--constructors for station objects
%define initialize_stations `
    SELECT station OF
      CASE(1):
        --initialize pathclass
          -- coord frm, coordinate system, part origin, idod
        `STATION1_PATH`__init(frm, cds, origin, toolprm.idod)
        --intialize motion friend class
          --tool offset, interpolate flag, program type
        `STATION1_MOTION`__init2(toolprm, TRUE, program_type, rastprm)
      CASE(2):
        `STATION2_PATH`__init(frm, cds, origin, toolprm.idod)
        `STATION2_MOTION`__init2(toolprm, TRUE, program_type, rastprm)
      CASE(3):
        `STATION3_PATH`__init(frm, cds, origin, toolprm.idod)
        `STATION3_MOTION`__init2(toolprm, TRUE, program_type, rastprm)
      CASE(4):
        `STATION4_PATH`__init(frm, cds, origin, toolprm.idod)
        `STATION4_MOTION`__init2(toolprm, TRUE, program_type, rastprm)
      ELSE:
        WRITE TPDISPLAY(CR, 'Workstation not selected properly')
        display__show
        ABORT
    ENDSELECT
`

--move through the path with the selected station
%define station_move `
    SELECT station OF
      CASE(1):
        --pathplan
        `STATION1_MOTION`__createPath(lines, contours, rastprm)
        --run path
        `STATION1_MOTION`__aquire_groups
        `STATION1_MOTION`__move(toolprm, motnprm)
        `STATION1_MOTION`__release_groups
      CASE(2):
        --pathplan
        `STATION2_MOTION`__createPath(lines, contours, rastprm)
        --run path
        `STATION2_MOTION`__aquire_groups
        `STATION2_MOTION`__move(toolprm, motnprm)
        `STATION2_MOTION`__release_groups
      CASE(3):
        --pathplan
        `STATION3_MOTION`__createPath(lines, contours, rastprm)
        --run path
        `STATION3_MOTION`__aquire_groups
        `STATION3_MOTION`__move(toolprm, motnprm)
        `STATION3_MOTION`__release_groups
      CASE(4):
        --pathplan
        `STATION4_MOTION`__createPath(lines, contours, rastprm)
        --run path
        `STATION4_MOTION`__aquire_groups
        `STATION4_MOTION`__move(toolprm, motnprm)
        `STATION4_MOTION`__release_groups
      ELSE:
        ABORT
    ENDSELECT
`

--destructors for station objects
%define delete_stations `
    SELECT station OF
      CASE(1):
        `STATION1_PATH`__delete
        `STATION1_MOTION`__delete
      CASE(2):
        `STATION2_PATH`__delete
        `STATION2_MOTION`__delete
      CASE(3):
        `STATION3_PATH`__delete
        `STATION3_MOTION`__delete
      CASE(4):
        `STATION4_PATH`__delete
        `STATION4_MOTION`__delete
      ELSE:
        ABORT
    ENDSELECT
`

--select the proper start corner if ID or OD is
--selected in previous form
%define default_start_corner(selected_idod) `
    SELECT station OF
      CASE(1):
        startCorner = `STATION1_PATH`__get_corner(selected_idod)
      CASE(2):
        startCorner = `STATION2_PATH`__get_corner(selected_idod)
      CASE(3):
        startCorner = `STATION3_PATH`__get_corner(selected_idod)
      CASE(4):
        startCorner = `STATION4_PATH`__get_corner(selected_idod)
      ELSE:
        ABORT
    ENDSELECT
`

--form branch for subform of whichever 'Shape'
--is selected in station form
%define load_shape_form `
    SELECT shapeType OF
      CASE(SHP_PAD):
        frm_padList
        b = forms__load(pad_file, pad_str)
        forms__show(pad_str, draw_val_arr)
      CASE(SHP_HEX):
        frm_hexList
        b = forms__load(hex_file, hex_str)
        forms__show(hex_str, draw_val_arr)
      CASE(SHP_CUST):
        frm_cusList
        b = forms__load(cus_file, cus_str)
        forms__show(cus_str, draw_val_arr)
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT
`

-- draw object from whichever shape is selected
%define draw_shape_form `
    SELECT shapeType OF
      CASE(SHP_PAD):
        --set canvas origin/perspective
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (cds.system), 0, (polyprm.polyRotation))
        `PATHDRAW_NAME`__drawPad(padprm, polyprm, rastprm)
        `PATHDRAW_NAME`__raster(rastprm)
      CASE(SHP_HEX):
        --set canvas origin/perspective. polyRotation is handled in polygon__hexagon.
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (cds.system), 0, 0)
        `PATHDRAW_NAME`__drawHex(hexprm, polyprm, rastprm)
        `PATHDRAW_NAME`__raster(rastprm)
      CASE(SHP_CUST):
        `PATHDRAW_NAME`__set_origin(toolprm.idod, (cds.system), 0, (polyprm.polyRotation))
        `PATHDRAW_NAME`__drawCustom(filename, polyprm, rastprm)
        `PATHDRAW_NAME`__raster(rastprm)
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT
`

%mode pop