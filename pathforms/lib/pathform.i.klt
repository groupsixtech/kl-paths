%mode push
%mode string QQQ "`" "`" "\\"

%define make_path_indicies(ps) `ROUTINE frm_pthList
  BEGIN
    --station info
    path_val_arr[1] = '['+ps+']stationTree'
    --
    path_val_arr[2] = '['+ps+']station'
    path_val_arr[3] = '['+ps+']program_type'
    path_val_arr[4] = '['+ps+']shapeType'
    path_val_arr[5] = '['+ps+']toolprm.coordSys'
    path_val_arr[6] = '['+ps+']idod_'
    path_val_arr[7] = '['+ps+']toolprm.pitch'
    --tool info
    path_val_arr[8] = '['+ps+']toolTree'
    --
    path_val_arr[9] = '['+ps+']default_wpr'
    path_val_arr[10] = '['+ps+']toolprm.orient.x'
    path_val_arr[11] = '['+ps+']toolprm.orient.y'
    path_val_arr[12] = '['+ps+']toolprm.orient.z'
    --raster info
    path_val_arr[13] = '['+ps+']rasterTree'
    --
    path_val_arr[14] = '['+ps+']rastprm.rastType'
    path_val_arr[15] = '['+ps+']rastprm.constrain'
    path_val_arr[16] = '['+ps+']rastprm.onBoundary'
    path_val_arr[17] = '['+ps+']rastprm.angle'
    path_val_arr[18] = '['+ps+']rastprm.overlap'
    path_val_arr[19] = '['+ps+']rastprm.dir'
    path_val_arr[20] = '['+ps+']rastprm.line_width'
    path_val_arr[21] = '['+ps+']rastprm.contours'
    path_val_arr[22] = '['+ps+']startCorner'
    --motion params
    path_val_arr[23] = '['+ps+']motionTree'
    --
    path_val_arr[24] = '['+ps+']motnprm.inDegrees'
    path_val_arr[25] = '['+ps+']toolprm.retractDist.x'
    path_val_arr[26] = '['+ps+']toolprm.retractDist.y'
    path_val_arr[27] = '['+ps+']toolprm.retractDist.z'
    path_val_arr[28] = '['+ps+']motnprm.tool_speed'
    path_val_arr[29] = '['+ps+']motnprm.link_speed'
    path_val_arr[30] = '['+ps+']motnprm.tool_step'
    path_val_arr[31] = '['+ps+']motnprm.link_step'
    path_val_arr[32] = '['+ps+']motnprm.use_arc'
  END frm_pthList

ROUTINE init_pthList
  BEGIN
    IF UNINIT(stationTree) THEN stationTree = TRUE ; ENDIF
    IF UNINIT(station) THEN station = 1 ; ENDIF
    IF UNINIT(program_type) THEN program_type = 1 ; ENDIF
    IF UNINIT(shapeType) THEN shapeType = 1 ; ENDIF
    --tool params
    IF UNINIT(toolTree) THEN toolTree = FALSE ; ENDIF
    IF UNINIT(default_wpr) THEN default_wpr = TRUE ; ENDIF
    IF UNINIT(toolprm.orient.x) THEN toolprm.orient.x = 0 ; toolprm.orient.y = 0 ; toolprm.orient.z = 0 ;  ENDIF
    IF UNINIT(toolprm.coordSys) THEN toolprm.coordSys = PTH_CYLINDER; ENDIF
    IF UNINIT(idod_) THEN idod_ = 1; ENDIF
    IF UNINIT(toolprm.pitch) THEN toolprm.pitch = 0; ENDIF
    IF UNINIT(toolprm.retractDist.z) THEN toolprm.retractDist.x = 0; toolprm.retractDist.y = 100; toolprm.retractDist.z = 30; ENDIF
    --raster params
    IF UNINIT(rasterTree) THEN rasterTree = TRUE ; ENDIF
    IF UNINIT(rastprm.rastType) THEN rastprm.rastType = 1; ENDIF
    IF UNINIT(rastprm.constrain) THEN rastprm.constrain = FALSE; ENDIF
    IF UNINIT(rastprm.onBoundary) THEN rastprm.onBoundary = TRUE; ENDIF
    IF UNINIT(startCorner) THEN startCorner = 1; ENDIF
    IF UNINIT(rastprm.overlap) THEN rastprm.overlap = 3.5; ENDIF
    IF UNINIT(rastprm.dir) THEN rastprm.dir = 1; ENDIF
    IF UNINIT(rastprm.line_width) THEN rastprm.line_width = 0; ENDIF
    IF UNINIT(rastprm.angle) THEN rastprm.angle = 0; ENDIF
    IF UNINIT(rastprm.contours) THEN rastprm.contours = 0; ENDIF
    --motion params
    IF UNINIT(motionTree) THEN motionTree = TRUE ; ENDIF
    IF UNINIT(motnprm.tool_speed) THEN motnprm.tool_speed = 12; ENDIF
    IF UNINIT(motnprm.link_speed) THEN motnprm.link_speed = 40; ENDIF
    IF UNINIT(motnprm.tool_step) THEN motnprm.tool_step = 45; ENDIF
    IF UNINIT(motnprm.link_step) THEN motnprm.link_step = 45; ENDIF
    IF UNINIT(motnprm.use_arc) THEN motnprm.use_arc = TRUE; ENDIF

    IF UNINIT(polyprm.polyRotation) THEN polyprm.polyRotation = 0 ; ENDIF
    IF UNINIT(polyprm.polyAngle) THEN polyprm.polyAngle = 0 ; ENDIF
  END init_pthList
`

%define make_pad_indicies(ps) `ROUTINE frm_padList
  BEGIN
    --pad parameters
    draw_val_arr[1] = '['+ps+']padprm.inDegrees'
    draw_val_arr[2] = '['+ps+']padprm.width'
    draw_val_arr[3] = '['+ps+']padprm.length'
    draw_val_arr[4] = '['+ps+']polyprm.height'
    draw_val_arr[5] = '['+ps+']polyprm.xStart'
    draw_val_arr[6] = '['+ps+']polyprm.yStart'
    draw_val_arr[7] = '['+ps+']polyprm.polyAngle'
    draw_val_arr[8] = '['+ps+']padprm.no_of_pads'
    draw_val_arr[9] = '['+ps+']padprm.separation'
    draw_val_arr[10] = ''
  END frm_padList

ROUTINE init_padList
  BEGIN
    --pad params
    IF UNINIT(padprm.no_of_pads) THEN padprm.no_of_pads = 1 ; ENDIF
    IF UNINIT(padprm.separation) THEN padprm.separation = 0 ; ENDIF
    IF UNINIT(padprm.width) THEN padprm.width = 0 ; ENDIF
    IF UNINIT(padprm.length) THEN padprm.length = 0 ; ENDIF
  END init_padList

ROUTINE frm_hexList
  BEGIN
    --pad parameters
    draw_val_arr[1] = '['+ps+']polyprm.inDegrees'
    draw_val_arr[2] = '['+ps+']hexprm.radius'
    draw_val_arr[3] = '['+ps+']hexprm.points'
    draw_val_arr[4] = '['+ps+']polyprm.height'
    draw_val_arr[5] = '['+ps+']polyprm.xStart'
    draw_val_arr[6] = '['+ps+']polyprm.yStart'
    draw_val_arr[7] = '['+ps+']polyprm.polyRotation'
    draw_val_arr[8] = '['+ps+']polyprm.polyAngle'
    draw_val_arr[9] = ''
    draw_val_arr[10] = ''
  END frm_hexList

ROUTINE init_hexList
  BEGIN
    --pad params
    IF UNINIT(hexprm.radius) THEN hexprm.radius = 50 ; ENDIF
    IF UNINIT(hexprm.points) THEN hexprm.points = 4 ; ENDIF
  END init_hexList

ROUTINE frm_cusList
  BEGIN
    --pad parameters
    draw_val_arr[1] = '['+ps+']polyprm.inDegrees'
    draw_val_arr[2] = '['+ps+']filename'
    draw_val_arr[3] = '['+ps+']polyprm.height'
    draw_val_arr[4] = '['+ps+']polyprm.xStart'
    draw_val_arr[5] = '['+ps+']polyprm.yStart'
    draw_val_arr[6] = '['+ps+']polyprm.polyRotation'
    draw_val_arr[7] = '['+ps+']polyprm.polyAngle'
    draw_val_arr[8] = ''
    draw_val_arr[9] = ''
    draw_val_arr[10] = ''
  END frm_cusList

ROUTINE cnvrt_to_mm
  BEGIN

    IF padprm.inDegrees THEN
      padprm.width = padprm.width*polyprm.height*M_PI/180
      padprm.separation = padprm.separation*polyprm.height*M_PI/180

      --make true so that start degree is calculated in mm
      polyprm.inDegrees = TRUE

      --deselect, as the vaues are now saved as mm
      padprm.inDegrees = FALSE
    ENDIF

    IF polyprm.inDegrees THEN
      polyprm.xStart = polyprm.xStart*polyprm.height*M_PI/180
      
      --deselect, as the vaues are now saved as mm
      polyprm.inDegrees = FALSE
    ENDIF

    IF motnprm.inDegrees THEN
      motnprm.tool_step = motnprm.tool_step*polyprm.height*M_PI/180
      motnprm.link_step = motnprm.link_step*polyprm.height*M_PI/180

      --deselect, as the vaues are now saved as mm
      motnprm.inDegrees = FALSE
    ENDIF
  END cnvrt_to_mm
`

%define make_work_indicies(ps) `ROUTINE frm_wrkList
  BEGIN
    --pad parameters
    work_val_arr[1] = '['+ps+']lsrprm.power'
    work_val_arr[2] = '['+ps+']powprm.hopper'
    work_val_arr[3] = '['+ps+']powprm.rpm'
    work_val_arr[4] = '['+ps+']powprm.lpm'
    work_val_arr[5] = '['+ps+']powprm.flow_rate'
    work_val_arr[6] = '['+ps+']powprm.height'
    work_val_arr[7] = ''
  END frm_wrkList

ROUTINE init_wrkList
  BEGIN
    --pad params
    IF UNINIT(lsrprm.power) THEN lsrprm.power = 3000 ; ENDIF
    IF UNINIT(powprm.hopper) THEN powprm.hopper = 1 ; ENDIF
  END init_wrkList
`

%mode pop