PROGRAM class_name
%NOLOCKGROUP
%COMMENT = 'pathform'

%include klevkeys.kl

--user forms for defining main parameters
%define dict_file 'gspptheg'
%define dict_str 'PPTH'

--user forms for defining polygons
%define dict_file2 'gsppadeg'
%define dict_str2 'PPAD'
%define dict_file3 'gsphexeg'
%define dict_str3 'PHEX'
%define dict_file4 'gspcuseg'
%define dict_str4 'PCUS'

--user form for work parameters
%define dict_file_work 'gsworkeg'
%define dict_str_work 'WORK'

--dictionary constants
-- ..note:: generated by compressor
%include ppth.kl
%include ppad.kl

%include errors.klt
%include systemlib.klt
%include pose.const.klt
%include pathplan.klt
%include pathlib.klt
%include toolpath.structs.klt
%include lam.klt
%include pathform.deps.klt

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%include display.c.klt
%endif

CONST
  SHP_PAD = 1
  SHP_HEX = 2
  SHP_CUST = 3

--include references to pathdraw
-- "lines" and "contours" for `MOTION`__createPath
%include pathdraw.friend.members.klt
pathdraw_friends(PATHDRAW_NAME)

%define BASE_CLASSNAME class_name

VAR
  path_val_arr : ARRAY[28] OF STRING[30]
  draw_val_arr : ARRAY[9] OF STRING[30]
  work_val_arr : ARRAY[7] OF STRING[30]

  station_name : ARRAY[5] OF STRING[20]
  --tree views
  stationTree, toolTree, rasterTree, motionTree : BOOLEAN
  station IN CMOS: INTEGER
  program_type IN CMOS : INTEGER
  shapeType IN CMOS : INTEGER
  filename IN CMOS : STRING[12]
  idod_ IN CMOS : INTEGER
  default_wpr IN CMOS : BOOLEAN
  -- poses
  origin : XYZWPR
  frm : XYZWPR
  cds : t_COORD_SYS
  --default start corner
  startCorner IN CMOS : INTEGER
  polyprm IN CMOS  : t_PATH_VARS
  toolprm IN CMOS  : t_TOOL_VARS
  rastprm IN CMOS  : t_PATH_RAST
  motnprm IN CMOS  : t_MOTION_PRM
  padprm  IN CMOS  : t_PAD_VARS
  hexprm IN CMOS   : t_HEX_VARS
  --work parameters
  lsrprm FROM LAM_NAME : t_LASER
  powprm FROM LAM_NAME : t_POWDER

  b : BOOLEAN
  term_char FROM forms : INTEGER

--helper functions
%from display.klh %import clear, show
%from pose.klh %import set_config
%from pathlib.klh %import set_orientation, new_coord_sys
%from systemlib.klh %import VEC
%include forms.klh
%include errors.klh

%ifeq ENABLE_SCANNING TRUE
%include multitask.klh
%endif

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

--create objects for each workstation
---
--path draw object
path_draw_define(PATHDRAW_NAME,FORM_CONFIG_FILENAME)

--lam object
lam_define(LAM_NAME,LAM_CNFG)

--motion object
path_make_define(STATION1_PATH,STATION1_CNFG)
path_motion_define(STATION1_MOTION,STATION1_CNFG)

%ifdef STATION2_CNFG
path_make_define(STATION2_PATH,STATION2_CNFG)
path_motion_define(STATION2_MOTION,STATION2_CNFG)
%endif
%ifdef STATION3_CNFG
path_make_define(STATION3_PATH,STATION3_CNFG)
path_motion_define(STATION3_MOTION,STATION3_CNFG)
%endif
%ifdef STATION4_CNFG
path_make_define(STATION4_PATH,STATION4_CNFG)
path_motion_define(STATION4_MOTION,STATION4_CNFG)
%endif
---

%ifeq ENABLE_SCANNING TRUE
--create scanning object
define_scan_object(SCANNING_OBJECT_NAME,SCANNING_CNFG)
---
%endif

%defeval class_name BASE_CLASSNAME

-- ** define form arrays
%include pathform.i.klt
make_path_indicies('class_name')
make_pad_indicies('class_name')
make_work_indicies('LAM_NAME')
-- USER DEFINED ROUTINE
define_station_names(station_name)

BEGIN
  --path parameters
  frm_pthList
  init_pthList

  --initalize parameters
  init_padList
  init_hexList

  --work parameters
  frm_wrkList
  init_wrkList

  -- USER DEFINED
  make_station

  -- *************

  --clear display
  display__clear

%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif

  --load forms
  b = forms__load(dict_file, dict_str)

  --show form
  forms__show(dict_str, path_val_arr)

  --conversions
  IF (idod_ = 2) THEN
    toolprm.idod = -1
  ENDIF
  IF (idod_ = 1) THEN
    toolprm.idod = 1
  ENDIF

  --start corner
  IF (toolprm.idod = -1) THEN
    rastprm.startCorner = startCorner
  ELSE
    SELECT (startCorner) OF
      CASE(LEFT_BOTTOM):
        rastprm.startCorner = RIGHT_BOTTOM
      CASE(RIGHT_BOTTOM):
        rastprm.startCorner = LEFT_BOTTOM
      CASE(LEFT_TOP):
        rastprm.startCorner = RIGHT_TOP
      CASE(RIGHT_TOP):
        rastprm.startCorner = LEFT_TOP
    ENDSELECT
  ENDIF

  --run program
  IF (term_char = ky_f2) THEN
    --show next form
    SELECT shapeType OF
      CASE(SHP_PAD):
        frm_padList
        b = forms__load(dict_file2, dict_str2)
        forms__show(dict_str2, draw_val_arr)
      CASE(SHP_HEX):
        frm_hexList
        b = forms__load(dict_file3, dict_str3)
        forms__show(dict_str3, draw_val_arr)
      CASE(SHP_CUST):
        frm_cusList
        b = forms__load(dict_file4, dict_str4)
        forms__show(dict_str4, draw_val_arr)
      ELSE:
        WRITE TPDISPLAY(CR, 'Shape type not selected properly')
        display__show
    ENDSELECT
 
    IF (term_char = ky_f2) THEN

      -- ** set frames **
      frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
      -- ..note:: tool offset is defined in motion constructor
      --          under the `define_tool_offset` member
      origin = POS((polyprm.xStart), (polyprm.yStart), (polyprm.height), (polyprm.polyAngle*toolprm.idod),0,0, pose__set_config(DEFAULT_CONFIG))
      --set coordinate system
      SELECT (toolprm.coordSys) OF
        CASE(PTH_CYLINDER):
          cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
        CASE(PTH_CARTESAN):
          cds = paths__new_coord_sys(PTH_CARTESAN, Z_AXES)
        ELSE:
          WRITE TPDISPLAY(CR, 'coordinate system not set')
          display__show
      ENDSELECT

      -- ** preprocess functionality **
      SELECT program_type OF
        --working toolpath
        CASE(MOVE_WORKING):
          b = forms__load(dict_file_work, dict_str_work)
          forms__show(dict_str_work, work_val_arr)

          IF (term_char = ky_f1) THEN
            `LAM_NAME`__set_registers
            `LAM_NAME`__start
          ENDIF
        --scanning toolpath
%ifeq ENABLE_SCANNING TRUE
        CASE(MOVE_SCANING):
          --load variables into scanning object
          -- ..note:: `orient` is unused in scan_part_dyn. Need to make seperate
          --          header file to exclude this parameter
          `SCANNING_OBJECT_NAME`__init(toolprm.coordSys, Z_AXES, VEC(0,0,0))
          --enable scanner
          IF NOT task__thread('SCANNING_OBJECT_NAME') THEN
              karelError(RUN_TASK_FAILED, 'scan task did not start',ER_ABORT)
          ENDIF
%endif
        --dry run toolpath
        ELSE:
      ENDSELECT

      -- ** intialize objects **
      SELECT station OF
        CASE(1):
          --initialize pathclass
            -- coord frm, coordinate system, part origin, idod
          `STATION1_PATH`__init(frm, cds, origin, toolprm.idod)
          --intialize motion friend class
            --tool offset, interpolate flag, program type
          `STATION1_MOTION`__init2(toolprm, TRUE, program_type)
%ifdef STATION2_CNFG
        CASE(2):
          `STATION2_PATH`__init(frm, cds, origin, toolprm.idod)
          `STATION2_MOTION`__init2(toolprm, TRUE, program_type)
%endif
%ifdef STATION3_CNFG
        CASE(3):
          `STATION3_PATH`__init(frm, cds, origin, toolprm.idod)
          `STATION3_MOTION`__init2(toolprm, TRUE, program_type)
%endif
%ifdef STATION4_CNFG
        CASE(4):
          `STATION4_PATH`__init(frm, cds, origin, toolprm.idod)
          `STATION4_MOTION`__init2(toolprm, TRUE, program_type)
%endif
        ELSE:
          WRITE TPDISPLAY(CR, 'Workstation not selected properly')
          display__show
          ABORT
      ENDSELECT
      

      -- ** draw shape, raster, and pathplan  **
      SELECT shapeType OF
        CASE(SHP_PAD):
          `PATHDRAW_NAME`__drawPad(padprm, rastprm)
        CASE(SHP_HEX):
          `PATHDRAW_NAME`__drawHex(hexprm, polyprm, rastprm)
        CASE(SHP_CUST):
          `PATHDRAW_NAME`__drawCustom(filename, polyprm, rastprm, frm)
        ELSE:
          WRITE TPDISPLAY(CR, 'Shape type not selected properly')
          display__show
      ENDSELECT

      -- ** move through raster **
      SELECT station OF
        CASE(1):
          --pathplan
          `STATION1_MOTION`__createPath(lines, contours, rastprm)
          --run path
          `STATION1_MOTION`__aquire_groups
          `STATION1_MOTION`__move(toolprm, motnprm)
          `STATION1_MOTION`__release_groups
%ifdef STATION2_CNFG
        CASE(2):
          --pathplan
          `STATION2_MOTION`__createPath(lines, contours, rastprm)
          --run path
          `STATION2_MOTION`__aquire_groups
          `STATION2_MOTION`__move(toolprm, motnprm)
          `STATION2_MOTION`__release_groups
%endif
%ifdef STATION3_CNFG
        CASE(3):
          --pathplan
          `STATION3_MOTION`__createPath(lines, contours, rastprm)
          --run path
          `STATION3_MOTION`__aquire_groups
          `STATION3_MOTION`__move(toolprm, motnprm)
          `STATION3_MOTION`__release_groups
%endif
%ifdef STATION4_CNFG
        CASE(4):
          --pathplan
          `STATION4_MOTION`__createPath(lines, contours, rastprm)
          --run path
          `STATION4_MOTION`__aquire_groups
          `STATION4_MOTION`__move(toolprm, motnprm)
          `STATION4_MOTION`__release_groups
%endif
        ELSE:
          ABORT
      ENDSELECT

      -- ** exist sequence **
      SELECT program_type OF
        --working toolpath
        CASE(MOVE_WORKING):
          `LAM_NAME`__stop
        --scanning toolpath
%ifeq ENABLE_SCANNING TRUE
        CASE(MOVE_SCANING):
          IF (program_type = MOVE_SCANING) THEN
            --stop scanning process
            `SCANNING_OBJECT_NAME`__set_scan_finished
          ENDIF
%endif
        --dry run toolpath
        ELSE:
      ENDSELECT

      --clean up
      `PATHDRAW_NAME`__delete

      SELECT station OF
        CASE(1):
          `STATION1_PATH`__delete
          `STATION1_MOTION`__delete
%ifdef STATION2_CNFG
        CASE(2):
          `STATION2_PATH`__delete
          `STATION2_MOTION`__delete
%endif
%ifdef STATION3_CNFG
        CASE(3):
          `STATION3_PATH`__delete
          `STATION3_MOTION`__delete
%endif
%ifdef STATION4_CNFG
        CASE(4):
          `STATION4_PATH`__delete
          `STATION4_MOTION`__delete
%endif
        ELSE:
          ABORT
      ENDSELECT

%ifdef DEBUG_BUILD
      usrdis__write_pipe
      usrdis__delete
%endif

    ELSE
      WRITE TPDISPLAY(CR, 'Must hit RUN on form to continue')
      WRITE TPDISPLAY(CR, 'Shift should not be held down.')
      display__show
      ABORT
    ENDIF
  ELSE
    WRITE TPDISPLAY(CR, 'Must hit NEXT on form to continue.')
    WRITE TPDISPLAY(CR, 'Shift should not be held down.')
    display__show
    ABORT
  ENDIF



END class_name