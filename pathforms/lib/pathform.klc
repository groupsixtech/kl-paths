PROGRAM class_name
%NOLOCKGROUP
%COMMENT = 'pathform'

%include klevkeys.kl

--user forms for defining main parameters
%define stat_file 'gsstateg'
%define stat_str 'STAT'
%define path_file 'gspptheg'
%define path_str 'PPTH'

--user forms for defining polygons
%define pad_file 'gsppadeg'
%define pad_str 'PPAD'
%define hex_file 'gsphexeg'
%define hex_str 'PHEX'
%define cus_file 'gspcuseg'
%define cus_str 'PCUS'

--user form for work parameters
%define work_file 'gsworkeg'
%define work_str 'WORK'

--dictionary constants
-- ..note:: generated by compressor
%include ppth.kl
%include ppad.kl

%include errors.klt
%include systemlib.klt
%include pose.const.klt
%include pathplan.klt
%include pathlib.klt
%include toolpath.structs.klt
%include lam.klt
%include pathform.deps.klt

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%include display.c.klt
%endif

CONST
  SHP_PAD = 1
  SHP_HEX = 2
  SHP_CUST = 3

%define M_PI 3.14159

--include references to pathdraw
-- "lines" and "contours" for `MOTION`__createPath
%include pathdraw.friend.members.klt
pathdraw_friends(PATHDRAW_NAME)

%define BASE_CLASSNAME class_name

VAR
  stat_val_arr : ARRAY[8] OF STRING[30]
  path_val_arr : ARRAY[28] OF STRING[30]
  draw_val_arr : ARRAY[12] OF STRING[30]
  work_val_arr : ARRAY[8] OF STRING[30]

  station_name : ARRAY[5] OF STRING[20]
  --tree views
  stationTree, toolTree, rasterTree, motionTree : BOOLEAN
  station IN CMOS: INTEGER
  program_type IN CMOS : INTEGER
  shapeType IN CMOS : INTEGER
  filename IN CMOS : STRING[12]
  idod_ IN CMOS : INTEGER
  default_wpr IN CMOS : BOOLEAN
  -- poses
  origin : XYZWPR
  frm : XYZWPR
  cds : t_COORD_SYS
  --default start corner
  startCorner IN CMOS : INTEGER
  polyprm IN CMOS  : t_PATH_VARS
  toolprm IN CMOS  : t_TOOL_VARS
  rastprm IN CMOS  : t_PATH_RAST
  motnprm IN CMOS  : t_MOTION_PRM
  padprm  IN CMOS  : t_PAD_VARS
  hexprm IN CMOS   : t_HEX_VARS
  --work parameters
  lsrprm FROM LAM_NAME : t_LASER
  powprm FROM LAM_NAME : t_POWDER

  b : BOOLEAN
  term_char FROM forms : INTEGER

--helper functions
%from display.klh %import clear, show
%from pose.klh %import set_config
%from pathlib.klh %import set_orientation, new_coord_sys, vec_to_toolvec
%from systemlib.klh %import VEC
%include forms.klh
%include errors.klh

%ifeq ENABLE_SCANNING TRUE
%include multitask.klh
%endif

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

--initialize form blocks
%include pathform.blocks.klt
--form include routines
%include pathform.i.klt

--create objects for each workstation
---
--path draw object
path_draw_define(PATHDRAW_NAME,FORM_CONFIG_FILENAME)

--lam object
lam_define(LAM_NAME,LAM_CNFG)

--motion object initialize
declare_stations
---

%ifeq ENABLE_SCANNING TRUE
--create scanning object
define_scan_object(SCANNING_OBJECT_NAME,SCANNING_CNFG)
---
%endif

%defeval class_name BASE_CLASSNAME

-- ** define form arrays
make_stat_indicies('class_name')
make_path_indicies('class_name')
make_pad_indicies('class_name')
make_work_indicies('LAM_NAME')
-- USER DEFINED ROUTINE
define_station_names(station_name)

BEGIN

  --uninitialize select button
  term_char = 0

  --station parameters
  frm_statList
  init_statLst

  --path parameters
  frm_pthList
  init_pthList

  --initalize parameters
  init_padList
  init_hexList

  --work parameters
  frm_wrkList
  init_wrkList

  -- USER DEFINED
  make_station

  -- *************

  --clear display
  display__clear

%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif


-- *** SHOW STATION FORM ***
--load forms
b = forms__load(stat_file, stat_str)

--show form
forms__show(stat_str, stat_val_arr)

  -- station settings
  IF (term_char = ky_f2) THEN

    --conversions
    IF (idod_ = 2) THEN
      toolprm.idod = -1
    ENDIF
    IF (idod_ = 1) THEN
      toolprm.idod = 1
    ENDIF


    -- *** SHOW PATH FORM ***
    --load forms
    b = forms__load(path_file, path_str)

    --show form
    forms__show(path_str, path_val_arr)

    -- path settings
    IF (term_char = ky_f2) THEN

      --start corner
      rastprm.startCorner = startCorner

      --get default tool orientation if selected
      IF default_wpr THEN
        IF toolprm.idod = -1 THEN
          toolprm.orient = paths__vec_to_toolvec(VEC(TOOL_ORIENT_UP))
        ELSE
          toolprm.orient = paths__vec_to_toolvec(VEC(TOOL_ORIENT_DOWN))
        ENDIF
      ENDIF 

      -- *** SHOW PAD, HEX, OR CUSTOM FORM ***
      --show next form
      load_shape_form
  
      IF (term_char = ky_f2) THEN

        -- convert units (deg to mm) if nessecary
        cnvrt_to_mm

        -- ** set frames **
        frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
        -- ..note:: tool offset is defined in motion constructor
        --          under the `define_tool_offset` member
        origin = POS((polyprm.xStart), (polyprm.yStart), (polyprm.height), (polyprm.polyAngle*toolprm.idod),0,0, pose__set_config(DEFAULT_CONFIG))
        --set coordinate system
        SELECT (toolprm.coordSys) OF
          CASE(PTH_CYLINDER):
            cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
          CASE(PTH_CARTESAN):
            cds = paths__new_coord_sys(PTH_CARTESAN, Z_AXES)
          ELSE:
            WRITE TPDISPLAY(CR, 'coordinate system not set')
            display__show
        ENDSELECT

        -- ** preprocess functionality **
        SELECT program_type OF

          -- *** SHOW WORK FORM ***
          --working toolpath
          CASE(MOVE_WORKING):
            b = forms__load(work_file, work_str)
            forms__show(work_str, work_val_arr)

            IF (term_char = ky_f1) THEN
              `LAM_NAME`__set_registers
              `LAM_NAME`__start
            ENDIF
          --scanning toolpath
%ifeq ENABLE_SCANNING TRUE
          CASE(MOVE_SCANING):
            --load variables into scanning object
            -- ..note:: `orient` is unused in scan_part_dyn. Need to make seperate
            --          header file to exclude this parameter
            `SCANNING_OBJECT_NAME`__init(toolprm.coordSys, Z_AXES, VEC(0,0,0))
            --enable scanner
            IF NOT task__thread('SCANNING_OBJECT_NAME') THEN
                karelError(RUN_TASK_FAILED, 'scan task did not start',ER_ABORT)
            ENDIF
%endif
          --dry run toolpath
          ELSE:
        ENDSELECT

        -- ** intialize objects **
        initialize_stations
        
        -- ** draw shape, raster, and pathplan  **
        draw_shape_form

        -- ** move through raster **
        station_move

        -- ** exist sequence **
        SELECT program_type OF
          --working toolpath
          CASE(MOVE_WORKING):
            `LAM_NAME`__stop
          --scanning toolpath
%ifeq ENABLE_SCANNING TRUE
          CASE(MOVE_SCANING):
            IF (program_type = MOVE_SCANING) THEN
              --stop scanning process
              `SCANNING_OBJECT_NAME`__set_scan_finished
            ENDIF
%endif
          --dry run toolpath
          ELSE:
        ENDSELECT

        --clean up
        `PATHDRAW_NAME`__delete

        --clean up stations
        delete_stations

%ifdef DEBUG_BUILD
        usrdis__write_pipe
        usrdis__delete
%endif

      ELSE
        WRITE TPDISPLAY(CR, 'Must hit RUN on form to continue')
        WRITE TPDISPLAY(CR, 'Shift should not be held down.')
        display__show
        ABORT
      ENDIF
    ELSE
      WRITE TPDISPLAY(CR, 'Must hit NEXT on form to continue.')
      WRITE TPDISPLAY(CR, 'Shift should not be held down.')
      display__show
      ABORT
    ENDIF
  ELSE
    WRITE TPDISPLAY(CR, 'Must hit NEXT on form to continue.')
    WRITE TPDISPLAY(CR, 'Shift should not be held down.')
    display__show
    ABORT
  ENDIF



END class_name