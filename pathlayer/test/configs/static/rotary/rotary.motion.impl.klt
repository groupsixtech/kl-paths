--include default interface
%include motion.interface.klt

-- ***********
-- Define type
-- ***********

-- for a simple type
%defeval MOTION_DATA_TYPE t_NODE
%defeval MOTION_DATA_FILE rbtgp2

%mode push
%mode string QQQ "`" "`" "\\"
%define motion_type(parent) `TYPE
  t_ROTARY FROM parent = JOINTPOS`ROT_AXES` IN GROUP[ROT_GRP]

  t_NODE FROM parent = STRUCTURE
    pose : XYZWPR IN GROUP[RBT_GRP]
    rot  : t_ROTARY
  ENDSTRUCTURE`
%mode pop

-- ***********
-- initialization  
-- ***********

%defeval DEFAULT_POSE new_pose(0,0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))

-- ***********
-- Define interface header
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define impl_motion_head(parent) `declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1 : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE FROM parent
declare_member(parent,make_tool_offset,parent,mktof)
ROUTINE make_tool_offset(ofst : XYZWPR) : MOTION_DATA_TYPE FROM parent
declare_member(parent,make_user_offset,parent,mkuof)
ROUTINE make_user_offset : MOTION_DATA_TYPE FROM parent
declare_member(parent,define_tool_offset,parent,dftof)
ROUTINE define_tool_offset(toolprm : t_TOOL_VARS) FROM parent
declare_member(parent,set_lpos,parent,stlps)
ROUTINE set_lpos : MOTION_DATA_TYPE FROM parent
declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : MOTION_DATA_TYPE FROM parent
declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : MOTION_DATA_TYPE; reg_no : INTEGER) FROM parent
declare_member(parent,get_cart,parent,gtcrt)
ROUTINE get_cart(nde : MOTION_DATA_TYPE) : XYZWPR FROM parent
declare_member(parent,get_component,parent,gtcmp)
ROUTINE get_component(nde : MOTION_DATA_TYPE; grp_no : INTEGER; comp_no : INTEGER) : REAL FROM parent
declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE FROM parent
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE FROM parent
declare_member(parent,approachPath,parent,appth)
ROUTINE approachPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR) FROM parent
declare_member(parent,retractPath,parent,rtpth)
ROUTINE retractPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR) FROM parent
`

%mode pop

-- ***********
-- Define interface
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define impl_motion_members(parent) `declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1 : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde.pose = POS(x,y,z,w,p,r, cnfg) 
    nde.rot = pose__zero_jointpos
    nde.rot = pose__set_jointpos_axis((nde.rot), ROTARY_JNT, j1)

    RETURN( nde )
  END new_pose

declare_member(parent,make_tool_offset,parent,mktof)
ROUTINE make_tool_offset(ofst : XYZWPR) : MOTION_DATA_TYPE
  BEGIN
    RETURN(new_pose(ofst.x,ofst.y,ofst.z,ofst.w,ofst.p,ofst.r, 0, ofst.config_data))
  END make_tool_offset

declare_member(parent,make_user_offset,parent,mkuof)
ROUTINE make_user_offset : MOTION_DATA_TYPE
  BEGIN
    RETURN(new_pose(0,0,0,0,0,0, 0, pose__set_config(DEFAULT_CONFIG)))
  END make_user_offset

declare_member(parent,define_tool_offset,parent,dftof)
ROUTINE define_tool_offset(toolprm : t_TOOL_VARS)
  BEGIN
    --set tool offset
    tool_offset = new_pose(0,0,0,(toolprm.orient.x + toolprm.pitch), toolprm.orient.y, toolprm.orient.z, 0, pose__set_config(DEFAULT_CONFIG))
    frame_offset = new_pose(0,0,0,0,0,0, 0, pose__set_config(DEFAULT_CONFIG))

  END define_tool_offset

declare_member(parent,set_lpos,parent,stlps)
ROUTINE set_lpos : MOTION_DATA_TYPE
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde.pose = pose__get_lpos(RBT_GRP)
    nde.rot = pose__get_jpos(ROT_GRP)

    RETURN( nde )
  END set_lpos

declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : MOTION_DATA_TYPE
  VAR
    deg : REAL
    p : MOTION_DATA_TYPE
  BEGIN
    IF (`PATH_OBJECT_NAME`__get_idod = -1) THEN deg = nde.v.r-180 ; ELSE deg = nde.v.r ; ENDIF
    p.pose = nde.v
    p.rot = pose__zero_jointpos
    p.rot = pose__set_jointpos_axis((p.rot), ROTARY_JNT, ROT_DIRECTION*deg )
    RETURN(p)
  END tpath2pos

declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : MOTION_DATA_TYPE; reg_no : INTEGER)
  BEGIN
    pose__set_posreg_xyz(nde.pose, reg_no, RBT_GRP)
    pose__set_posreg_joint((nde.rot), reg_no, ROT_GRP)
  END set_posereg

declare_member(parent,get_cart,parent,gtcrt)
ROUTINE get_cart(nde : MOTION_DATA_TYPE) : XYZWPR
  BEGIN
    RETURN(nde.pose)
  END get_cart

declare_member(parent,get_component,parent,gtcmp)
ROUTINE get_component(nde : MOTION_DATA_TYPE; grp_no : INTEGER; comp_no : INTEGER) : REAL
  VAR
    status : INTEGER
    rotary : ARRAY[ROT_AXES] OF REAL
  BEGIN
    SELECT grp_no OF
      CASE(RBT_GRP):
        SELECT comp_no OF
          CASE(1):
            RETURN(nde.pose.x)
          CASE(2):
            RETURN(nde.pose.y)
          CASE(3):
            RETURN(nde.pose.z)
          CASE(4):
            RETURN(nde.pose.w)
          CASE(5):
            RETURN(nde.pose.p)
          CASE(6):
            RETURN(nde.pose.r)
          ELSE:
            karelError(INVALID_TYPE_CODE, 'Component number is not valid for get_component', ER_ABORT)
        ENDSELECT
      CASE(ROT_GRP):
        CNV_JPOS_REL(nde.rot, rotary, status)
        RETURN(rotary[comp_no])
      ELSE:
          karelError(INVALID_TYPE_CODE, 'group number is not valid for get_component', ER_ABORT)
    ENDSELECT

    RETURN(0)
  END get_component

declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE
  VAR
    p : MOTION_DATA_TYPE
    jpos1, jpos2 : JOINTPOS
  BEGIN
    p.pose = nde1.pose:nde2.pose

    -- MUST dereference from GROUP first! 
    jpos1 = (nde1.rot)
    jpos2 = (nde2.rot)
    
    p.rot = pose__add_jpos(jpos1, jpos2)

    RETURN(p)
  END poseMul
  
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE
  VAR
    p : MOTION_DATA_TYPE
  BEGIN
    p.pose = INV((nde1.pose))
    p.rot = nde1.rot
    RETURN(p)
  END poseInv
declare_member(parent,approachPath,parent,appth)
ROUTINE approachPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR)
  VAR
%define APPROACH_DEGREE_DIFF 5
    lpos : XYZWPR
    spos, spos2 : VECTOR
    vpos1, vpos2 : VECTOR
  BEGIN

%ifdef DEBUG_PLOT_POINTS
    usrplt__print(INFO, '* Approach Path *')
%endif
%ifdef DEBUG_BUILD
    usrdis__print(INFO, '* Approach Path*')
%endif

    spos2 = VEC(0,offset.y,-1*idod*offset.z)
    lpos = pose__get_lpos(1)

    --if cylindrical. Convert.
    IF (coordSys=PTH_CYLINDER) THEN
      lpos = pose__cartesian_to_cylindrical(origin, lpos, VERT_AXES, origin.z, TRUE)
      spos = VEC(lpos.x, lpos.y, lpos.z)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'lpos: ' + vec_to_s(spos, ','))
    usrdis__print(DEBUG, 'appr: ' + vec_to_s(spos2, ','))
%endif

      --move between origin and start degree
      IF (ABS(spos2.x - spos.x) > APPROACH_DEGREE_DIFF) THEN
        -- ..note:: set travel direction in step size
        `PATH_OBJECT_NAME`__makeline(spos, spos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
        moveArc
      ENDIF
    ENDIF
    IF (coordSys=PTH_CARTESAN) THEN
      spos = VEC(lpos.x, lpos.y, lpos.z)

      `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
      moveLine
    ENDIF

    spos = VEC(origin.x,origin.y+offset.y,origin.z-idod*offset.z)
    spos2 = VEC(origin.x,origin.y,origin.z-idod*offset.z)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'spos: ' + vec_to_s(spos, ','))
    usrdis__print(DEBUG, 'spos2: ' + vec_to_s(spos2, ','))
%endif

    --move to offset -> to zero poisition
    `PATH_OBJECT_NAME`__makeline(spos, spos2, (ZEROPOS(1)), PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
    moveLine

    --origin point
    vpos1 = INV((origin)):spos2

    --get start position of path from drawing
    lpos = `PATH_OBJECT_NAME`__get_start_node
    vpos2 = VEC(lpos.x, lpos.y, lpos.z)

    --apply retract offset
    vpos2.z = vpos2.z-idod*offset.z

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'vpos1: ' + vec_to_s(vpos1, ','))
    usrdis__print(DEBUG, 'vpos2: ' + vec_to_s(vpos2, ','))
%endif

    IF (coordSys=PTH_CYLINDER) THEN
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG, 'running cylindrical line...')
%endif
      --move between origin and start degree
      IF (ABS(vpos2.x - vpos1.x) > APPROACH_DEGREE_DIFF) THEN
        -- ..note:: set travel direction in step size
        `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
        moveArc
      ENDIF
    ENDIF

    IF (coordSys=PTH_CARTESAN) THEN
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG, 'running cartesian line...')
%endif
      `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
      moveLine
    ENDIF

  END approachPath
declare_member(parent,retractPath,parent,rtpth)
ROUTINE retractPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR)
  VAR
%define APPROACH_DEGREE_DIFF 5
    lpos : XYZWPR
    lposOffset : REAL
    vpos1, vpos2, vpos3 : VECTOR
    spos : VECTOR
    fpos : VECTOR
  BEGIN

%ifdef DEBUG_PLOT_POINTS
    usrplt__print(INFO, '* Retract Path *')
%endif
%ifdef DEBUG_BUILD
    usrdis__print(INFO, '* Retract Path*')
%endif

    lpos = `PATH_OBJECT_NAME`__get_end_node
    --get into degress from 0-360
    lpos.x = lpos.x/origin.z*180/M_PI
%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('deg: ', lpos.x::6::2, CR)
%endif
    lpos.x = lpos.x*origin.z*M_PI/180

    vpos1 = VEC(lpos.x, lpos.y, lpos.z)

    -- retract point
    vpos2 = vpos1
    vpos2.z = vpos1.z-idod*offset.z

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'vpos1: ' + vec_to_s(vpos1, ','))
    usrdis__print(DEBUG, 'vpos2: ' + vec_to_s(vpos1, ','))
%endif

    --move up from lpos to the retract height
    `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
    moveLine

    --convert into frame
    vpos3 = origin:vpos2

    -- get finish point
    fpos = VEC(vpos3.x,origin.y+offset.y,vpos3.z)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'fpos: ' + vec_to_s(fpos, ','))
%endif

    --move from the origin to the retract distance to the offset
    `PATH_OBJECT_NAME`__makeline(vpos3, fpos, (ZEROPOS(1)), PTH_LINKING, PTH_LINETO, stepSize, speed, 1, VEC(1,0,0))
    moveLine

  END retractPath
`

%mode pop
