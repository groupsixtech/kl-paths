PROGRAM paths
%NOBUSYLAMP
%COMMENT = 'path lib'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%define QUERY_MAX_DIST 1.E6
--Make RASTER_EPSILON very large to account for 
--rounding issues in perpendicular and 
--horizontal values
%define RASTER_EPSILON 1
%define EPSILON 0.01
%define M_PI 3.1415926535

%include errors.klt
%include systemlib.klt
%include systemvars.klt
%include draw.rect.klt
%include pose.const.klt
%include pathplan.klt
%include pathlib.klt

%include errors.klh
%ifdef DEBUG_BUILD
%include strings.klh
%endif

%include pose.klh
%from math.klh %import rotz_vec, norm, norm2, average_vector, proj, proj_length
%from systemlib.klh %import VEC, VEC2D

%include pathlib.klh
%include pathlib.private.klh

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

--private

ROUTINE paths__compute_diagonals
  VAR
    i,j : INTEGER
    parallel_dir : VECTOR
    v, q : VECTOR
    long, lat : REAL
    b : BOOLEAN
  BEGIN
    --do not compute diagonals if up index and down index are uninitialized
    IF UNINIT(query[1].idx) AND UNINIT(query[2].idx) THEN RETURN ; ENDIF
 
    -- initialize query
    IF NOT UNINIT(query[1].idx) THEN
      query[5].value = 0
    ENDIF
    IF NOT UNINIT(query[2].idx) THEN
      query[6].value = 0
    ENDIF

    --get parallel direction
    parallel_dir = math__rotz_vec((raster_dir), -90)
    
    FOR i=1 TO PATH_LEN(data) DO
      IF (data[i].code = PTH_CLOSE) OR (data[i].code = PTH_MOVETO) THEN
        
        v = data[i].v ; v.z = 0;

        --CHECK UP DIAGONAL
        IF NOT UNINIT(query[1].idx) THEN
          q = data[query[1].idx].v ; q.z = 0;
          long = raster_dir@(v - q)
          lat = parallel_dir@(v - q)

          --if polygon independent check diagonals over full drawing
          --if polygon dependent check points only on the polygon.
          b = FALSE
          IF polygon_dep THEN
            IF (data[query[1].idx].polygon = data[i].polygon) AND (data[query[1].idx].polygon = point.polygon) THEN
              b = TRUE
            ELSE
              b = FALSE
            ENDIF
          ELSE
            b = TRUE
          ENDIF

          IF b THEN
            -- if colinear with up point find the furthest point away from this point
            -- long = 0 and lat <> 0
            IF (ABS(long) < RASTER_EPSILON) AND (ABS(lat) > RASTER_EPSILON) THEN
              --pick furthest point
              IF (ABS(lat) > query[5].value) AND (data[i].code = paths__opposite_code((point.code)) ) THEN
                query[5].idx = i ; query[5].value = ABS(lat)
              ENDIF
            ENDIF
          ENDIF
        ENDIF

        --CHECK DOWN DIAGONAL
        IF NOT UNINIT(query[2].idx) THEN
          q = data[query[2].idx].v ; q.z = 0;
          long = raster_dir@(v - q)
          lat = parallel_dir@(v - q)

          --if polygon independent check diagonals over full drawing
          --if polygon dependent check points only on the polygon.
          b = FALSE
          IF polygon_dep THEN
            IF (data[query[2].idx].polygon = data[i].polygon) AND (data[query[2].idx].polygon = point.polygon) THEN
              b = TRUE
            ELSE
              b = FALSE
            ENDIF
          ELSE
            b = TRUE
          ENDIF

          IF b THEN
            -- if colinear with down point find furthest point from this node
            -- long = 0 and lat <> 0
            IF (ABS(long) < RASTER_EPSILON) AND (ABS(lat) > RASTER_EPSILON) THEN
              --pick furthest point
              IF (ABS(lat) > query[6].value) AND (data[i].code = paths__opposite_code((point.code)) ) THEN
                query[6].idx = i ; query[6].value = ABS(lat)
              ENDIF
            ENDIF
          ENDIF

        ENDIF

      ENDIF
    ENDFOR

    --return query
  END paths__compute_diagonals

ROUTINE paths__get_path_vector
  VAR
    i, n, m : INTEGER
    strt, emd : VECTOR
  BEGIN
    IF (NOT (data[start_idx].code = PTH_MOVETO)) AND (NOT (data[start_idx].code = PTH_CLOSE)) THEN
      --find start or end of path if in between
      i = 0
      REPEAT
        i = i + 1
        n = ((start_idx+i-1) MOD PATH_LEN(data)) + 1
      UNTIL((data[n].code = PTH_CLOSE) OR (data[n].code = PTH_MOVETO))
    ELSE
      n = start_idx
    ENDIF

    strt = data[n].v
    --zero z
    strt.z = 0

    --loop through until first complete curve is
    --found
    i = 0
    REPEAT
      -- assume line is moving in positive direction
      IF (data[n].code = PTH_MOVETO) THEN
        i = i + 1
      ENDIF
      -- assume line is moving in negative direction
      IF (data[n].code = PTH_CLOSE) THEN
        i = i - 1
      ENDIF
      m = n + i
    UNTIL((data[m].code = PTH_CLOSE) OR (data[m].code = PTH_MOVETO))

    emd = data[m].v
    --zero z
    emd.z = 0

    --assume PTH_MOVETO -> PTH_CLOSE creates a line,
    --get unit vector of line
    --raster direction is perpendicular to the line
    RETURN ( (emd - strt)/math__norm(emd - strt) )

  END paths__get_path_vector

ROUTINE paths__get_increments
  BEGIN
    --get length of line
    -- determine increment percentage between 0 - 1
    RETURN( TRUNC(math__norm(emd - strt)/spacing) )
  END paths__get_increments

ROUTINE paths__psuedo_center
  VAR
    i : INTEGER
    center : VECTOR
    count: INTEGER
  BEGIN
    center.x = 0 ; center.y = 0; center.z = 0;
    count = 0
    FOR i=strti TO endi DO
      SELECT (data[i].code) OF
        CASE(PTH_MOVETO,PTH_CLOSE):
          center.x = center.x + data[i].v.x
          center.y = center.y + data[i].v.y
          count = count + 1
        ELSE:
      ENDSELECT
    ENDFOR
    center.x = center.x/count
    center.y = center.y/count

    RETURN(center)
  END paths__psuedo_center

--comparator = TRUE : >, comparator = FALSE : <
ROUTINE glt(r1, r2 : REAL; comparator : BOOLEAN) : BOOLEAN
  BEGIN
    IF comparator THEN
      RETURN(r1 > r2)
    ELSE
      RETURN(r1 < r2)
    ENDIF
  END glt

ROUTINE minmax(point_arr : PATH nodedata = t_VEC_PATH; strti, endi : INTEGER ; &
               origin : VECTOR ; search_vec : VECTOR; comparator : BOOLEAN) : INTEGER
  VAR
   i : INTEGER
   minmax_idx : INTEGER
   valy, valx : REAL
   perp_vec : VECTOR
   v : VECTOR
  BEGIN
    --get perpendicular vector
    perp_vec = math__rotz_vec((search_vec), 90)
    --find y min
    minmax_idx = strti
    --dot product between (point-origin) and search vector
    --will give the point with the maximum distance from the
    --origin wrt the search vector
    valy = search_vec@(point_arr[strti].v-origin)
    valx = perp_vec@(point_arr[strti].v-origin)
    FOR i=strti TO endi DO
      SELECT (point_arr[i].code) OF
        CASE(PTH_MOVETO,PTH_CLOSE):
          v = point_arr[i].v
          --remove z
          v.z = 0

          IF (glt( search_vec@(v-origin), valy, comparator) ) THEN
            valy = search_vec@(v-origin)
            valx = perp_vec@(v-origin)
            minmax_idx = i
          ENDIF

          IF (search_vec@(v-origin) = valy) THEN
            IF (glt( perp_vec@(v-origin), valx, comparator) ) THEN
              valy = search_vec@(v-origin)
              valx = perp_vec@(v-origin)
              minmax_idx = i
            ENDIF
          ENDIF
        ELSE:
      ENDSELECT
    ENDFOR

    RETURN(minmax_idx)

  END minmax

ROUTINE paths__find_min
  BEGIN
    RETURN( minmax(point_arr, strti, endi, center, search_vec, FALSE) )
  END paths__find_min

ROUTINE paths__find_max
  BEGIN
    RETURN( minmax(point_arr, strti, endi, center, search_vec, TRUE) )
  END paths__find_max

--public

ROUTINE paths__clear_vecpath
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END paths__clear_vecpath

ROUTINE paths__clear_pospath
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END paths__clear_pospath

ROUTINE paths__clear_toolpath
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END paths__clear_toolpath

ROUTINE paths__clear_vec
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END paths__clear_vec

ROUTINE paths__clear_pos
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END paths__clear_pos

ROUTINE paths__opposite_code
  BEGIN
    SELECT code OF
      CASE(PTH_CLOSE):
        RETURN(PTH_MOVETO)
      CASE(PTH_MOVETO):
        RETURN(PTH_CLOSE)
      CASE(PTH_STOP):
        RETURN(PTH_MOVETO)
      ELSE:
    ENDSELECT

    RETURN(code)
    
  END paths__opposite_code

ROUTINE paths__new_vpath
  VAR
    vpth : t_VEC_PATH
  BEGIN
    vpth.v = v ; vpth.code = code ; vpth.polygon = polygon ; vpth.tangent = tangent ;
    RETURN(vpth)
  END paths__new_vpath

ROUTINE paths__new_ppath
  VAR
    vpth : t_POS_PATH
  BEGIN
    vpth.v = v ; vpth.code = code ; vpth.polygon = polygon ; vpth.tangent = tangent ;
    RETURN(vpth)
  END paths__new_ppath

ROUTINE paths__new_tpath
  VAR
    vpth : t_TOOLPATH
  BEGIN
    vpth.v = v ; vpth.code = code ; vpth.typ = typ ; vpth.tangent = tangent ;
    RETURN(vpth)
  END paths__new_tpath

ROUTINE paths__new_coord_sys
  VAR
    cs : t_COORD_SYS
  BEGIN
    cs.system = system ; cs.z_axis = z_axis
    RETURN(cs)
  END paths__new_coord_sys

ROUTINE paths__set_orientation
  VAR
    orient : VECTOR
  BEGIN
    --set point orientation
    SELECT (crd_sys) OF
      CASE(PTH_CYLINDER):
        IF idod = -1 THEN
          orient = UP_NORMAL
        ELSE
          orient = DOWN_NORMAL
        ENDIF
      CASE(PTH_POLAR):
        IF idod = -1 THEN
          orient = POLAR_UP_NORMAL
        ELSE
          orient = POLAR_DOWN_NORMAL
        ENDIF
      --cartesian
      ELSE:
        IF idod = -1 THEN
          orient = UP_NORMAL
        ELSE
          orient = DOWN_NORMAL
        ENDIF
    ENDSELECT

    RETURN(orient)
  END paths__set_orientation

ROUTINE paths__total_polygons
  VAR
    i : INTEGER
    count : INTEGER
  BEGIN
    count = 0
    FOR i=1 TO PATH_LEN(data) DO
      IF data[i].polygon > count THEN
        count = data[i].polygon
      ENDIF
    ENDFOR

    RETURN(count)
  END paths__total_polygons

ROUTINE paths__filter_polygon
  VAR
    i, status : INTEGER
  BEGIN
    paths__clear_vecpath(out_path)

    FOR i=1 TO PATH_LEN(data) DO
      IF (data[i].polygon = polygon) OR (polygon=0) THEN
        APPEND_NODE(out_path,status)
        out_path[PATH_LEN(out_path)] = data[i]
      ENDIF
    ENDFOR
  END paths__filter_polygon

ROUTINE paths__calc_bounding_box
  VAR
    edges : ARRAY[4] OF VECTOR
    box : t_RECT
    parallel_dir, perp_dir : VECTOR
    center : VECTOR
    angle :REAL
    origin : XYZWPR
    i : INTEGER
  BEGIN
    --get parallel direction
    --loop through until first complete curve is
    --found
    parallel_dir = paths__get_path_vector(1, data)
    --get perpendicular vector
    perp_dir = math__rotz_vec((parallel_dir), 90)

    angle = ATAN2(parallel_dir.x, parallel_dir.y)

    --approximated center
    center = paths__psuedo_center(data, 1, PATH_LEN(data))

    --find four corners
    --x
    edges[1] = data[paths__find_min(data, 1, PATH_LEN(data), center, parallel_dir )].v
    edges[2] = data[paths__find_max(data, 1, PATH_LEN(data), center, parallel_dir )].v
    --y
    edges[3] = data[paths__find_min(data, 1, PATH_LEN(data), center, perp_dir )].v
    edges[4] = data[paths__find_max(data, 1, PATH_LEN(data), center, perp_dir )].v

    --put edges in rotated frame
    origin.x = 0; origin.y = 0; origin.z = 0; origin.w = 0; origin.p = 0; origin.r = angle ;
    FOR i=1 TO ARRAY_LEN(edges) DO
      edges[i] = INV((origin)):edges[i]
    ENDFOR

    box.verts[1] = origin:(VEC2D(edges[1].x, edges[3].y))
    box.verts[2] = origin:(VEC2D(edges[2].x, edges[3].y))
    box.verts[3] = origin:(VEC2D(edges[2].x, edges[4].y))
    box.verts[4] = origin:(VEC2D(edges[1].x, edges[4].y))

    box.vec[1] = parallel_dir
    box.vec[2] = perp_dir
    box.center = math__average_vector(box.verts)

    RETURN(box)
  END paths__calc_bounding_box

ROUTINE paths__map_to_bounding_box
  VAR
    i : INTEGER
    polygon : INTEGER
    v : VECTOR
  BEGIN

    FOR i=1 TO PATH_LEN(data) DO
      --only do for line endpoints
      SELECT data[i].code OF
        CASE(PTH_CLOSE,PTH_MOVETO):
          
          --use t_VEC_PATH.approach to determine spatial up/down
          --neighbors. Project each point to the closest edge of 
          --the bounding box to force into a rectangular patten.
          --You can then use the bounding box vectors to determine
          --if a point is above or below the other.
          v = data[i].v ; v.z = 0
          --choose bounding box edge with the shortest distance to the point
          IF math__proj_length((v - bboxs[data[i].polygon].verts[1]), bboxs[data[i].polygon].vec[1]) < math__proj_length((v - bboxs[data[i].polygon].verts[2]), bboxs[data[i].polygon].vec[1]) THEN
            --get projected point on left side of box
            data[i].approach = math__proj((v - bboxs[data[i].polygon].verts[1]), bboxs[data[i].polygon].vec[2]) + bboxs[data[i].polygon].verts[1]
          ELSE
            --get projected point on right side of box
            data[i].approach = math__proj((v - bboxs[data[i].polygon].verts[2]), bboxs[data[i].polygon].vec[2]) + bboxs[data[i].polygon].verts[2]
          ENDIF
        ELSE:
      ENDSELECT
    ENDFOR
  END paths__map_to_bounding_box

--.. warning:: currently `raster_neighbors` is pretty hacky to get
--             all of the tests to work. Should look for an algorithm
--             to find spatial neighbors. Need to take out `t_VEC_PATH.approach`,
--             or polygonal line info.

-- query order : up,down,right,left,diag_up,diag_down
ROUTINE paths__raster_neighbors
  VAR
    i : INTEGER
    status : INTEGER
    query : T_RASTQUERY
    parallel_dir, perp_dir : VECTOR
    v, q : VECTOR
    det : VECTOR
    long, lat, long2, lat2 : REAL
    dist : REAL
    mindist : ARRAY[2] OF REAL
%ifdef DEBUG_BUILD
    str_arr : ARRAY[6] OF STRING[5]
%endif
  BEGIN
    -- initialize query
    --follows unit circle around origin
    FOR i=1 TO ARRAY_LEN(query) DO
      --starts on i=1 MOD 2 is odd
      IF (i MOD 2 = 0) THEN
        --down/left/diag_down
        query[i].value = -QUERY_MAX_DIST
      ELSE
        --up/right/diag_up
        query[i].value = QUERY_MAX_DIST
      ENDIF
    ENDFOR

    mindist[1] = QUERY_MAX_DIST ; mindist[2] = QUERY_MAX_DIST

    --get parallel direction
    --loop through until first complete curve is
    --found
    parallel_dir = paths__get_path_vector(1, data)
    --get perpendicular vector
    perp_dir = math__rotz_vec((parallel_dir), 90)

    --remove z component of query point
    q = point.v; q.z = 0

-- %ifdef DEBUG_BUILD
--     usrdis__print(DEBUG,'perp dir:' + vec_to_s(perp_dir, ','))
--     usrdis__print(DEBUG,'parallel dir:' + vec_to_s(parallel_dir, ','))
-- %endif

-- %ifdef DEBUG_BUILD
--     usrdis__print(DEBUG,'Finding NN for :' + vec_to_s(point.v, ','))
-- %endif

    FOR i=1 TO PATH_LEN(data) DO
      --only do for line endpoints
      SELECT data[i].code OF
        CASE(PTH_CLOSE,PTH_MOVETO):

        --remove z compenent for 2d view
        v = data[i].v; v.z = 0

-- %ifdef DEBUG_BUILD
--         usrdis__print(DEBUG,'checking point:' + i_to_s(i) + ' ' + vec_to_s(data[i].v, ','))
-- %endif

        -- ..note:: use determinate instead of dot product. It is
        --          faster, and more accurate due to not having to
        --          calculate the perpendicular vectors for each.
        det = perp_dir#(v - q)
        lat = det.z
        det = parallel_dir#(v - q)
        long = det.z
        
        -- get vector of projected polygon on bounding box
        det = perp_dir#(data[i].approach - point.approach)
        lat2 = det.z
        det = parallel_dir#(data[i].approach - point.approach)
        long2 = det.z

        --dist = math__norm(v - data[i].approach)
        dist = math__norm(v - q)


-- %ifdef DEBUG_BUILD
--         usrdis__print(DEBUG,'long:' + r_to_s(long) + ' lat:' + r_to_s(lat))
-- %endif

        --left and right nodes will be parallel with queried node
        -- if colinear with parallel vector. long = 0
        IF (ABS(long) < RASTER_EPSILON) THEN
          IF (ABS(lat) > RASTER_EPSILON) THEN
            --pick closer point
            --left of point if lat is negative
            IF (lat < -RASTER_EPSILON) THEN
              IF (lat > query[4].value) AND (data[i].code = paths__opposite_code((point.code)) ) THEN
                query[4].idx = i ; query[4].value = lat
              ENDIF
            --right of point if lat is positive
            ELSE
              IF (lat < query[3].value) AND (data[i].code = paths__opposite_code((point.code)) ) THEN
                query[3].idx = i ; query[3].value = lat
              ENDIF
            ENDIF
          ELSE
            -- if long and lat = 0, points are the same. check if right or left point
            -- is filled. fill the empty slot with the duplicate point
            IF (data[i].code = paths__opposite_code((point.code)) ) THEN
              query[3].idx = i ; query[3].value = lat
              query[4].idx = i ; query[4].value = lat
            ENDIF
          ENDIF
        ENDIF

        --up and down nodes will not be perpendicular with queried node
        IF (ABS(lat2) < RASTER_EPSILON) THEN
          IF (ABS(long2) > RASTER_EPSILON) THEN
            --down point if long is negative
            IF (long2 < -RASTER_EPSILON) THEN
              IF (long2 >= query[2].value) AND (dist < mindist[2]) AND (data[i].code = point.code) THEN
                query[2].idx = i ; query[2].value = long2
                mindist[2] = dist
              ENDIF
            --up points if long is positive
            ELSE
              IF (long2 <= query[1].value) AND (dist < mindist[1]) AND (data[i].code = point.code) THEN

                query[1].idx = i ; query[1].value = long2
                mindist[1] = dist
              ENDIF
            ENDIF
          ENDIF
        ENDIF

        ELSE:
      ENDSELECT
    ENDFOR

    --compute diagonals
    -- raster_dir is the vector of raster lines
    paths__compute_diagonals(point, perp_dir, polygon_dep, data, query)

%ifdef DEBUG_BUILD
    s_to_arr('up,down,right,left,dup,ddown',',',str_arr)
    usrdis__print(DEBUG, ' ')
    usrdis__print(DEBUG,'Neighbors for Point: ' + vec_to_s(point.v, ','))
    FOR i=1 TO ARRAY_LEN(str_arr) DO
      IF NOT UNINIT(query[i].idx) THEN
        usrdis__print(DEBUG,str_arr[i] + ' NN' + i_to_s(query[i].idx) +':' + vec_to_s(data[query[i].idx].v, ',') + ' dist: ' + r_to_s(query[i].value))
      ENDIF
    ENDFOR
%endif

    RETURN(query)
  END paths__raster_neighbors

ROUTINE paths__raster_neighbors_ppath
  VAR
    query : T_RASTQUERY
  BEGIN
    --.. danger::
    --routine needs to be implemented
    RETURN(query)
  END paths__raster_neighbors_ppath

ROUTINE paths__get_opposite_polygon_corner
  VAR
    i : INTEGER
    opp_code : INTEGER
    long, lat : REAL
    raster_dir, pth_dir : VECTOR
    v, q : VECTOR
    costs : ARRAY[2] OF T_PTHQUERY
  BEGIN

    pth_dir = paths__get_path_vector(point_idx, data)
    raster_dir = math__rotz_vec( pth_dir, -90)

    IF stackedtop THEN
      opp_code = paths__opposite_code((data[point_idx].code))
    ELSE
      opp_code = data[point_idx].code
    ENDIF

    --lat cost. want closest to zero.
    costs[1].value = QUERY_MAX_DIST
    --long cost. want max
    costs[2].value = 0
    
    FOR i=1 TO PATH_LEN(data) DO
      -- filter points on same polygon with same path code
      IF (data[i].polygon = data[point_idx].polygon) AND (data[i].code = opp_code ) THEN
        v = data[i].v ; v.z = 0;
        q = data[point_idx].v ; q.z = 0;

        lat = ABS(pth_dir@(v - q))
        long = ABS(raster_dir@(v - q))

        IF stackedtop THEN
          --pick point closest to point_idx in raster direction
          IF (lat < costs[1].value) THEN
            costs[2].idx = i ; costs[2].value = long ;
            costs[1].idx = i ; costs[1].value = lat ;
          -- if point are equal choose point closest to point_idx 
          ELSE IF (ABS(lat - costs[1].value) < EPSILON) THEN
            IF (long < costs[2].value) THEN
              costs[2].idx = i ; costs[2].value = long ;
              costs[1].idx = i ; costs[1].value = lat ;
            ENDIF
          ENDIF
          ENDIF
        ELSE
          --pick point furthest from point_idx in raster direction
          IF (long > costs[2].value) THEN
            costs[2].idx = i ; costs[2].value = long ;
            costs[1].idx = i ; costs[1].value = lat ;
          -- if point are equal choose point closest to point_idx 
          ELSE IF (ABS(long - costs[2].value) < EPSILON) THEN
            IF (lat < costs[1].value) THEN
              costs[2].idx = i ; costs[2].value = long ;
              costs[1].idx = i ; costs[1].value = lat ;
            ENDIF
          ENDIF
          ENDIF
        ENDIF

      ENDIF
    ENDFOR
    
    RETURN(costs[1].idx)

  END paths__get_opposite_polygon_corner

ROUTINE paths__interpolate_vpath
  VAR
    i,j : INTEGER
    inc : INTEGER
    status : INTEGER
  BEGIN

    FOR i=1 TO PATH_LEN(vpath)-1 DO

      inc = paths__get_increments(vpath[i].v, vpath[i+1].v, spacing)

      --add start point
      APPEND_NODE(out_path,status)
      out_path[PATH_LEN(out_path)] = vpath[i]
      out_path[PATH_LEN(out_path)].v = ref_frame:vpath[i].v
      out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent

      IF inc > 0 THEN
        FOR j=1 TO (inc-1) DO
          --interpolate points
          APPEND_NODE(out_path,status)
          out_path[PATH_LEN(out_path)] = vpath[i+1]
          out_path[PATH_LEN(out_path)].code = line_type
          out_path[PATH_LEN(out_path)].v = ref_frame:((j/inc)*vpath[i+1].v + (1-(j/inc))*vpath[i].v)
          out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent
        ENDFOR
      ENDIF

      --add end point
      APPEND_NODE(out_path,status)
      out_path[PATH_LEN(out_path)] = vpath[i+1]
      out_path[PATH_LEN(out_path)].v = ref_frame:vpath[i+1].v
      out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent

    ENDFOR
  END paths__interpolate_vpath

ROUTINE paths__interpolate_toolpath
  VAR
    i,j : INTEGER
    inc : INTEGER
    status : INTEGER
    v, o : VECTOR
  BEGIN

    FOR i=1 TO PATH_LEN(vpath)-1 DO

      inc = paths__get_increments(pose__pose_to_vector(vpath[i].v), pose__pose_to_vector(vpath[i+1].v), spacing)

      --add start point
      APPEND_NODE(out_path,status)
      out_path[PATH_LEN(out_path)] = vpath[i]
      out_path[PATH_LEN(out_path)].v = ref_frame:vpath[i].v
      out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent

      IF inc > 0 THEN
        FOR j=1 TO (inc-1) DO
          --interpolate points
          APPEND_NODE(out_path,status)
          out_path[PATH_LEN(out_path)] = vpath[i+1]
          out_path[PATH_LEN(out_path)].code = line_type
          v = (j/inc)*pose__pose_to_vector(vpath[i+1].v) + (1-(j/inc))*pose__pose_to_vector(vpath[i].v)
          o = pose__get_orientation(vpath[i].v)
          out_path[PATH_LEN(out_path)].v = ref_frame:POS(v.x, v.y, v.z, o.x, o.y, o.z, ref_frame.config_data)
          out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent
        ENDFOR
      ENDIF

      --add end point
      -- Do not duplicate points between connecting line segments
      IF (vpath[i+1].code=PTH_MOVETO) OR (vpath[i+1].code=PTH_CLOSE) THEN
        APPEND_NODE(out_path,status)
        out_path[PATH_LEN(out_path)] = vpath[i+1]
        out_path[PATH_LEN(out_path)].v = ref_frame:vpath[i+1].v
        out_path[PATH_LEN(out_path)].tangent = ref_frame:vpath[i].tangent
      ENDIF

    ENDFOR

  END paths__interpolate_toolpath

ROUTINE paths__vpath_to_vec
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(vpath) DO
      APPEND_NODE(out_path,status)
      out_path[PATH_LEN(out_path)].v = ref_frame:vpath[i].v
    ENDFOR
    --return out_path
  END paths__vpath_to_vec

ROUTINE paths__vpath_to_pos
  VAR
    i : INTEGER
    o : VECTOR
    status : INTEGER
  BEGIN
    o.x = ref_frame.w ; o.y = ref_frame.p ; o.z = ref_frame.r
    FOR i=1 TO PATH_LEN(vpath) DO
      APPEND_NODE(out_path,status)
      out_path[PATH_LEN(out_path)].v = ref_frame:pose__vector_to_pose(vpath[i].v, VEC(0,0,0), ref_frame.config_data)
    ENDFOR
    --return out_path
  END paths__vpath_to_pos

ROUTINE paths__offset_toolpath
  VAR
    i : INTEGER
    b1, b2 : BOOLEAN
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      b1 = TRUE ; b2 = TRUE ;
      IF (filter_code > PTH_NULL) AND (p[i].code <> filter_code) THEN
        b1 = FALSE
      ENDIF
      IF (filter_typ > PTH_NULL) AND (p[i].typ <> filter_typ) THEN
        b1 = FALSE
      ENDIF
      IF b1 AND b2 THEN
        p[i].v = p[i].v:offset_pos
      ENDIF
    ENDFOR
  END paths__offset_toolpath

ROUTINE paths__cylindrical_to_cartesian
  VAR
    i : INTEGER
  BEGIN
    -- ..note::
    --      cannot include tangent line orientation as x and y axes need
    --      to be the same unit of measurment (mm/mm) not (deg/mm)
    FOR i=1 TO PATH_LEN(p) DO
      p[i].v = pose__cylindrical_to_cartesian(ref_frame, (p[i].v), z_axis)
    ENDFOR
  END paths__cylindrical_to_cartesian

ROUTINE paths__cylindrical_to_cartesian_mm
  VAR
    i : INTEGER
    cyl_pos : XYZWPR
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      cyl_pos = p[i].v
      cyl_pos.x = cyl_pos.x/radius*180/M_PI
      p[i].v = pose__cylindrical_to_cartesian(ref_frame, cyl_pos, z_axis)
    ENDFOR
  END paths__cylindrical_to_cartesian_mm

ROUTINE paths__polar_to_cartesian
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      p[i].v = pose__polar_to_cartesian(ref_frame, (p[i].v), z_axis)
    ENDFOR
  END paths__polar_to_cartesian

ROUTINE paths__polar_to_cartesian_mm
  VAR
    i : INTEGER
    pol_pos : XYZWPR
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      pol_pos = p[i].v
      pol_pos.x = pol_pos.x/radius*180/M_PI
      pol_pos.y = pol_pos.y/radius*180/M_PI
      p[i].v = pose__polar_to_cartesian(ref_frame, pol_pos, z_axis)
    ENDFOR
  END paths__polar_to_cartesian_mm

BEGIN
END paths
