--include default interface
%include pathmake.interface.klt

-- ***********
-- Define interface header
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define define_pmake_headers(parent) `declare_member(parent,convertOrientation,parent,cnvor)
ROUTINE convertOrientation(p : PATH nodedata = t_TOOLPATH ; frm : XYZWPR; radius : REAL; system : INTEGER; z_axis : INTEGER; flip : BOOLEAN) FROM parent
declare_member(parent,linkingTransition,parent,lktrs)
ROUTINE linkingTransition(p : PATH nodedata = t_TOOLPATH; frm : XYZWPR; spacing : REAL; idod : INTEGER) FROM parent
`
%mode pop

-- ***********
-- Define interface
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define define_pmake_members(parent) `declare_member(parent,convertOrientation,parent,cnvor)
ROUTINE convertOrientation(p : PATH nodedata = t_TOOLPATH ; frm : XYZWPR; radius : REAL; system : INTEGER; z_axis : INTEGER; flip : BOOLEAN)
  VAR
    i : INTEGER
    surfpos : XYZWPR
  BEGIN
    --convert to cartesian
    SELECT (system) OF
      CASE(PTH_CYLINDER):
        FOR i=1 TO PATH_LEN(p) DO
          --convert surface arc into degrees
          surfpos = p[i].v
          surfpos.x = surfpos.x/radius*180/M_PI
          --convert coordinates
          p[i].v = pose__cylindrical_to_cartesian(frm, (surfpos), (z_axis))

          --convert tangent vector to Euler angles
          --replace orientation
          p[i].v = pose__replace_orient(p[i].v, pose__vector_to_euler_cylindrical(p[i].tangent, (-1*surfpos.x+180)))

          IF flip THEN
            p[i].v.w = p[i].v.w + 180 ;
          ENDIF
        ENDFOR
      CASE(PTH_POLAR):
        FOR i=1 TO PATH_LEN(p) DO
          --convert surface uv into theta and phi angles
          surfpos = p[i].v
          surfpos.x = surfpos.x/radius*180/M_PI
          surfpos.y = surfpos.y/radius*180/M_PI
          --convert coordinates
          p[i].v = pose__polar_to_cartesian(frm, (surfpos), (z_axis))

          --..warning::
          karelError(INVALID_TYPE_CODE,'convertOrientation: Fixed orientation not yet implemented for Spherical system', ER_ABORT)
        ENDFOR
      CASE(PTH_CARTESAN):
      ELSE:
    ENDSELECT
  END convertOrientation
declare_member(parent,linkingTransition,parent,lktrs)
ROUTINE linkingTransition(p : PATH nodedata = t_TOOLPATH; frm : XYZWPR; spacing : REAL; idod : INTEGER)
  BEGIN
    get_toolpath_interpolate(spacing, PTH_LINETO, TRUE, p)
  END linkingTransition
`
%mode pop