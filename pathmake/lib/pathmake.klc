PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'pathmake'
%NOLOCKGROUP

%define M_PI 3.14159

%ifdef ROT_GRP
%ifeq ROT_GRP 0
%undef ROT_GRP
%endif
%endif
%ifdef TRACK_GRP
%ifeq TRACK_GRP 0
%undef TRACK_GRP
%endif
%endif

%include namespace.m

%include errors.klt
%include systemlib.types.klt
%include systemvars.klt
%include pose.const.klt
%include pathlib.klt
%include pathplan.klt
%include draw.klt
%include toolpath.structs.klt
%include pathmake.deps.klt

%define BASE_CLASSNAME class_name

VAR
  this : t_PATH_PARAM
  linking_cds : t_COORD_SYS
  pth_end : BOOLEAN
  line_endpnts : PATH nodedata = t_TOOLPATH
  pth : PATH nodedata = t_TOOLPATH

-- include reference to pathplan "tool_segment".
%include pathplan.friend.members.klt
pathplan_friends(PATH_PLAN_NAME)

%include errors.klh
%include pose.klh
%include pathlib.klh
%from registers.klh %import set_real, set_int
%from systemlib.klh %import VEC, VEC2D

--path plan
define_pathplan(PATH_PLAN_NAME,PATHPLAN_CONFIG_FILENAME)
define_pplan_headers(PATH_PLAN_NAME)

%defeval class_name BASE_CLASSNAME

%include pathmake.klh

--implement pathmake interface
define_pmake_members(class_name)

%defeval class_name BASE_CLASSNAME

--private

--public

ROUTINE next_toolpath
-- Retrieves the next path in the pathplan
-- handles the linking path for cylindrical cartesian, and rotary
  VAR
    cds : t_COORD_SYS
  BEGIN
    IF this.usePathPlan THEN
      SELECT `PATH_PLAN_NAME`__next_toolpath OF
        CASE(PTH_TOOLING):

          --get toolpath from pathplan
          IF interp_tool THEN
            -- ..note:: Speed is blended during toolpath_interpolate. in `path_blending` implementation
            --          calling speed_blending
            `PATH_PLAN_NAME`__get_toolpath_interpolate((tool_step), PTH_LINETO, FALSE, pth)
          ELSE
            `PATH_PLAN_NAME`__get_toolpath(pth)
          ENDIF

          --set speed
          -- ..warning:: This will override set the speed to a static
          --             speed 'tool_speed' for the whole tool_segment 
          paths__set_speed(pth, tool_speed)
        CASE(PTH_LINKING):

          --get toolpath from linkingTransition user defined member
          linkingTransition(tool_segment, (this.frm), (link_step), (this.idod), FALSE, pth)
          
          --set speed
          paths__set_speed(pth, link_speed)
      ENDSELECT

      --set coord system
        --tooling and linking will have same coordinate system
      cds = paths__new_coord_sys((this.coord_system.system), (this.coord_system.z_axis))

    ENDIF

    IF PATH_LEN(pth) > 0 THEN
      --raise if linking
      -- ..note:: passes are fed in line by line, so we can assume `pth`
      --          all has the same path code
      IF (pth[1].code = PTH_LINKING) THEN
        paths__offset_toolpath(pth, POS(0,0,retract_hght,0,0,0,(ZEROPOS(1).config_data)), PTH_NULL, PTH_LINKING)
      ENDIF

      --convert to cartesian
      -- ..note:: this function will not do anything if the coord system is cartesian
      convertOrientation(pth, (this.frm), (this.origin.z), (cds.system), (cds.z_axis), FALSE)
    ENDIF
  END next_toolpath

ROUTINE get_toolpath
-- Retrieves the full path from the pathplan
-- handles the linking path for cylindrical cartesian, and rotary
  VAR
    endpnts : ARRAY[2] OF t_TOOLPATH
    status : INTEGER
    cds : t_COORD_SYS
  BEGIN
    paths__clear_toolpath(pth)
    IF this.usePathPlan THEN
      REPEAT
        SELECT (`PATH_PLAN_NAME`__next_toolpath) OF
          CASE(PTH_TOOLING):

            --set speed
            -- ..warning:: This will override set the speed to a static
            --             speed 'tool_speed' for the whole tool_segment 
            paths__set_speed(tool_segment, tool_speed)

            --get toolpath from pathplan
            IF interp_tool THEN
              `PATH_PLAN_NAME`__get_toolpath_interpolate((tool_step), PTH_LINETO, TRUE, pth)
            ELSE
              `PATH_PLAN_NAME`__get_toolpath(pth)
            ENDIF
          CASE(PTH_LINKING):
            --set speed
            paths__set_speed(tool_segment, link_speed)

            --get toolpath from linkingTransition user defined member
            linkingTransition(tool_segment, (this.frm), (link_step), (this.idod), TRUE, pth)
        ENDSELECT
      UNTIL( is_path_end )

      --set coord system
      cds = paths__new_coord_sys((this.coord_system.system), (this.coord_system.z_axis))
    ELSE
      karelError(UNSUPPORTED_ITEM,'Must currently use Path Planning for "get_toolpath" member.', ER_ABORT)
    ENDIF

    --raise linking path
    paths__offset_toolpath(pth, POS(0,0,retract_hght,0,0,0,(ZEROPOS(1).config_data)), PTH_NULL, PTH_LINKING)

    --convert to cartesian
    convertOrientation(pth, (this.frm), (this.origin.z), (cds.system), (cds.z_axis), FALSE)
  END get_toolpath

ROUTINE get_midpoint
  VAR
    nde : t_TOOLPATH
    v, o : VECTOR
  BEGIN
    --load start point meta data
    nde.code = code ; nde.typ = typ;

    v = 0.5*pose__pose_to_vector(pth[end_idx].v) + 0.5*pose__pose_to_vector(pth[start_idx].v)
    o = 0.5*pose__get_orientation(pth[end_idx].v) + 0.5*pose__get_orientation(pth[start_idx].v)
    nde.v = POS(v.x, v.y, v.z, o.x, o.y, o.z, pth[end_idx].v.config_data)

    RETURN(nde)
  END get_midpoint



ROUTINE new
  BEGIN
    paths__clear_toolpath(line_endpnts)
    paths__clear_toolpath(pth)

    this.frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    this.origin = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))

    set_coordinate_system(PTH_CARTESAN, 3)
    set_linking_coordinate_system(PTH_CARTESAN, 3)
    set_idod(1)

    this.usePathPlan = TRUE

    pth_end = FALSE

  END new

ROUTINE init
  BEGIN
    paths__clear_toolpath(line_endpnts)
    paths__clear_toolpath(pth)

    this.frm = coord_frm
    this.origin = origin

    this.coord_system = paths__new_coord_sys((coord_sys.system), (coord_sys.z_axis))
    set_linking_coordinate_system((coord_sys.system), (coord_sys.z_axis))

    this.usePathPlan = doPathPlan

    --registers preset in template
    set_idod(idod)
    pth_end = FALSE
  END init

ROUTINE init2
  BEGIN
    paths__clear_toolpath(line_endpnts)
    paths__clear_toolpath(pth)

    this = make_prm

    pth_end = FALSE
  END init2

ROUTINE delete
  VAR
    unit_sys : t_COORD_SYS
    unit_param : t_PATH_PARAM
  BEGIN
    paths__clear_toolpath(line_endpnts)
    paths__clear_toolpath(pth)

    this = unit_param

    linking_cds = unit_sys

    pth_end = FALSE

    --free path plan
    `PATH_PLAN_NAME`__delete
  END delete

ROUTINE set_idod
  BEGIN
    this.idod = i
  END set_idod

ROUTINE set_coordinate_system
  BEGIN
    this.coord_system.system = system
    this.coord_system.z_axis = z_axis
  END set_coordinate_system

ROUTINE set_linking_coordinate_system
  BEGIN
    linking_cds.system = system
    linking_cds.z_axis = z_axis
  END set_linking_coordinate_system

ROUTINE set_coord_frame
  BEGIN
    this.frm = POS(x,y,z,w,p,r, pose__set_config(DEFAULT_CONFIG))
  END set_coord_frame

ROUTINE set_origin
  BEGIN
    this.origin = POS(x,y,z,w,p,r, pose__set_config(DEFAULT_CONFIG))
  END set_origin

ROUTINE set_path_end
  BEGIN
    pth_end = b
  END set_path_end

ROUTINE set_usepathplan
  BEGIN
    this.usePathPlan = b
  END set_usepathplan

ROUTINE define_origin
  BEGIN
    this.origin = POS((polyprm.xStart), (polyprm.yStart), (polyprm.height), (polyprm.polyAngle*toolprm.idod),0,0, pose__set_config(DEFAULT_CONFIG))
  END define_origin

ROUTINE get_orient
  BEGIN
    IF idod = -1 THEN
      RETURN(VEC(TOOL_ORIENT_UP))
    ELSE
      RETURN(VEC(TOOL_ORIENT_DOWN))
    ENDIF
  END get_orient

ROUTINE get_corner
  BEGIN
    IF idod = -1 THEN
      RETURN(ID_CORNER)
    ELSE
      RETURN(OD_CORNER)
    ENDIF
  END get_corner

ROUTINE get_idod
  BEGIN
    RETURN(this.idod)
  END get_idod

ROUTINE get_path
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(pth, 0, 0, out_path, status)
  END get_path

ROUTINE get_origin
  BEGIN
    RETURN(this.origin)
  END get_origin

ROUTINE get_plan
  VAR
    status : INTEGER
  BEGIN
    `PATH_PLAN_NAME`__get_plan(out_path)
  END get_plan

ROUTINE is_path_end
  BEGIN
    --use `pth_end` for external flagging for end of path
    --if using path paln check module if at end
    --of buffer
    IF this.usePathPlan THEN
      pth_end = `PATH_PLAN_NAME`__is_path_end
      RETURN((pth_end))
    ENDIF

    --external flag to set, for ending path
    IF pth_end = TRUE THEN
      RETURN(TRUE)
    ELSE
      RETURN(FALSE)
    ENDIF

    --if no path, assume it is at end of buffer
    IF PATH_LEN(pth) = 0 THEN
      pth_end = TRUE
      RETURN(TRUE)
    ENDIF

    RETURN(FALSE)

  END is_path_end

ROUTINE planPath
  VAR
    orient : VECTOR
  BEGIN
    IF this.usePathPlan THEN
      `PATH_PLAN_NAME`__init(lines, this.origin)
      IF raster_type = NEARESTNEIGHBOR THEN
        `PATH_PLAN_NAME`__NN_graph
      ELSE
        --(poly_depend, strict_dir)
        `PATH_PLAN_NAME`__raster_graph(raster_type, poly_depend, TRUE)
      ENDIF

      IF PATH_LEN(contours) > 0 THEN
        --append contours after to not include in rastering process
        -- (add to kd tree) = FALSE
        `PATH_PLAN_NAME`__append_path(contours, FALSE)
      ENDIF

      `PATH_PLAN_NAME`__MST(`PATH_PLAN_NAME`__closest_bounding_box(start_corner))

      --set point orientation
      orient = paths__set_orientation((this.coord_system.system), this.idod)
      orient = orient - VEC(this.origin.w, this.origin.p, this.origin.r)
      `PATH_PLAN_NAME`__set_orientation( orient )
    ENDIF

  END planPath

ROUTINE planImportPath
  BEGIN
    IF this.usePathPlan THEN
      `PATH_PLAN_NAME`__new(this.origin)
      `PATH_PLAN_NAME`__importPath(filename)

      IF raster_type = NEARESTNEIGHBOR THEN
        `PATH_PLAN_NAME`__NN_graph
      ELSE
        --(poly_depend, strict_dir)
        `PATH_PLAN_NAME`__raster_graph(raster_type, poly_depend, TRUE)
      ENDIF

      `PATH_PLAN_NAME`__MST(`PATH_PLAN_NAME`__closest_bounding_box(start_corner))

      --set point orientation
      `PATH_PLAN_NAME`__set_orientation( paths__set_orientation((this.coord_system.system), this.idod) )
    ENDIF
  END planImportPath

ROUTINE get_start_node
  BEGIN
    RETURN(this.frm:`PATH_PLAN_NAME`__get_start_node)
  END get_start_node

ROUTINE get_end_node
  BEGIN
    RETURN(this.frm:`PATH_PLAN_NAME`__get_end_node)
  END get_end_node

ROUTINE makeline
  VAR
    status : INTEGER
  BEGIN
    --update config_data to default
    ref_frame = pose__replace_config(ref_frame, (this.frm.config_data))

    paths__clear_toolpath(line_endpnts)
    --add start point
    APPEND_NODE(line_endpnts,status)
    line_endpnts[PATH_LEN(line_endpnts)] = paths__new_tpath(pose__vector_to_pose(start_point, paths__set_orientation((this.coord_system.system), this.idod), (this.frm.config_data)), PTH_MOVETO, line_typ, speed, tangent)
    --add end point
    APPEND_NODE(line_endpnts,status)
    line_endpnts[PATH_LEN(line_endpnts)] = paths__new_tpath(pose__vector_to_pose(end_point, paths__set_orientation((this.coord_system.system), this.idod), (this.frm.config_data)), PTH_CLOSE, line_typ, speed, tangent)
    --`PATH_PLAN_NAME`__set_toolpath(line_endpnts)

    paths__clear_toolpath(pth)
    interpolate_toolpath(line_endpnts, (spacing), dir, line_code, ref_frame, FALSE, pth)

    IF UNINIT(this.coord_system.system) THEN
      karelError(VAR_UNINIT,'coordinate system must be set in class_name', ER_ABORT)
    ENDIF

    --convert to cartesian
    convertOrientation(pth, (this.frm), (this.origin.z), (this.coord_system.system), (this.coord_system.z_axis), FALSE)

  END makeline

ROUTINE get_line
  BEGIN
    paths__clear_toolpath(line_endpnts)
    --get line
    `PATH_PLAN_NAME`__set_line(line_no, revrs_ordr, line_typ)

    IF reverse_line THEN
      paths__reverse_toolpath(tool_segment)
    ENDIF

    IF NOT append THEN
      paths__clear_toolpath(pth)
    ENDIF

    `PATH_PLAN_NAME`__get_toolpath_interpolate((spacing), PTH_LINETO, append, pth)

    IF doOffset THEN
      paths__offset_toolpath(pth, offset, PTH_NULL, line_typ)
    ENDIF

    IF UNINIT(this.coord_system.system) THEN
      karelError(VAR_UNINIT,'coordinate system must be set in class_name', ER_ABORT)
    ENDIF

    --convert to cartesian
    convertOrientation(pth, (this.frm), (this.origin.z), (this.coord_system.system), (this.coord_system.z_axis), FALSE)

  END get_line

ROUTINE interpolate_toolpath
  VAR
    i, j : INTEGER
    inc : INTEGER
    status : INTEGER
  BEGIN
    IF NOT append THEN
      paths__clear_toolpath(out_path)
    ENDIF

    IF PATH_LEN(endpnts) > 0 THEN
      FOR i=1 TO PATH_LEN(endpnts)-1 DO
        
        inc = paths__get_increments(pose__pose_to_vector(endpnts[i].v), pose__pose_to_vector(endpnts[i+1].v), (spacing))
        
        --add start point
        APPEND_NODE(out_path,status)
        out_path[PATH_LEN(out_path)] = endpnts[i]

        path_blending(endpnts, i, ref_frame, dir*0, out_path[PATH_LEN(out_path)])

        IF inc > 0 THEN
          FOR j=1 TO (inc-1) DO
            --interpolate points
            APPEND_NODE(out_path,status)
            out_path[PATH_LEN(out_path)] = endpnts[i+1]
            out_path[PATH_LEN(out_path)].code = line_type

            path_blending(endpnts, i, ref_frame, dir*(j/inc), out_path[PATH_LEN(out_path)])

          ENDFOR
        ENDIF

        --add end point
        -- Do not duplicate points between connecting line segments
        IF (endpnts[i+1].code=PTH_MOVETO) OR (endpnts[i+1].code=PTH_CLOSE) THEN
          APPEND_NODE(out_path,status)
          out_path[PATH_LEN(out_path)] = endpnts[i+1]

          path_blending(endpnts, i, ref_frame, dir*1, out_path[PATH_LEN(out_path)])
        ENDIF
      ENDFOR
    ENDIF
  END interpolate_toolpath

ROUTINE set_segment_speed_bounds
  VAR
    i : INTEGER
  BEGIN
    --set bounds
    inpth[1].speed = start_speed
    inpth[PATH_LEN(tool_segment)].speed = end_speed

    IF (PATH_LEN(tool_segment) > 2) THEN
      FOR i=2 TO (PATH_LEN(tool_segment) - 1) DO
        speed_blending(start_speed, end_speed, (i-1)/(PATH_LEN(inpth)-1), inpth[i])
      ENDFOR
    ENDIF
  END set_segment_speed_bounds

BEGIN
END class_name
