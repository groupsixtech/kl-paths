%ifndef pathclass_interface_t
%define pathclass_interface_t

-- ***********
-- Define type
-- ***********

-- for a simple type
%defeval MOTION_DATA_TYPE t_NODE
%defeval MOTION_DATA_JOINT_TYPE t_JNODE
%defeval MOTION_DATA_FILE rbtgp2

%define MOTION_TYPE_ATTR1 pose
%define MOTION_TYPE_ATTR2 rot

%mode push
%mode string QQQ "`" "`" "\\"
%define motion_type(parent) `TYPE
  t_ROTARY FROM parent = JOINTPOS`ROT_AXES` IN GROUP[ROT_GRP]

  t_NODE FROM parent = STRUCTURE
    pose : XYZWPR IN GROUP[RBT_GRP]
    rot  : t_ROTARY
  ENDSTRUCTURE

  t_JNODE FROM parent = STRUCTURE
    pose : JOINTPOS6 IN GROUP[RBT_GRP]
    rot  : t_ROTARY
  ENDSTRUCTURE`
%mode pop

-- ***********
-- initialization  
-- ***********

%defeval DEFAULT_POSE new_pose(0,0,0,0,0,0,DEFAULT_POS_JNT,DEFAULT_ROT,pose__set_config(DEFAULT_CONFIG))

-- ***********
-- Define interface header
-- ***********

%mode push
%mode string QQQ "$" "$" "\\"
%defeval impl_motion_head(parent) $
impl_motion_init_head(parent)
impl_motion_offsets_head(parent)
impl_motion_convert_head(parent)
impl_motion_setters_head(parent)
impl_motion_getters_head(parent)
impl_motion_operation_head(parent)
$
%mode pop


%mode push
%mode string QQQ "$" "$" "\\"

%define impl_motion_init_head(parent) $declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1,j2 : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE FROM parent
declare_member(parent,new_cart,parent,ncart)
ROUTINE new_cart(x,y,z,w,p,r : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE FROM parent
declare_member(parent,new_joint,parent,njnt)
ROUTINE new_joint(gp1_j1,gp1_j2,gp1_j3,gp1_j4,gp1_j5,gp1_j6,gp2_j1, gp2_j2 : REAL) : MOTION_DATA_JOINT_TYPE FROM parent
$

%define impl_motion_offsets_head(parent) $declare_member(parent,make_tool_offset,parent,mktof)
ROUTINE make_tool_offset(ofst : XYZWPR) : MOTION_DATA_TYPE  FROM parent
declare_member(parent,make_user_offset,parent,mkuof)
ROUTINE make_user_offset(toolprm : t_TOOL_VARS) : MOTION_DATA_TYPE FROM parent
declare_member(parent,define_tool_offset,parent,dftof)
ROUTINE define_tool_offset(toolprm : t_TOOL_VARS) : MOTION_DATA_TYPE FROM parent
$

%define impl_motion_convert_head(parent) $
declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : MOTION_DATA_TYPE FROM parent
declare_member(parent,copy,parent,copy)
ROUTINE copy(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE) FROM parent
declare_member(parent,copy_joint,parent,cpyj)
ROUTINE copy_joint(nde1 : MOTION_DATA_JOINT_TYPE; nde2 : MOTION_DATA_JOINT_TYPE) FROM parent
$

%define impl_motion_setters_head(parent) $declare_member(parent,set_lpos,parent,stlps)
ROUTINE set_lpos : MOTION_DATA_TYPE FROM parent
declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : MOTION_DATA_TYPE; reg_no : INTEGER) FROM parent
declare_member(parent,set_cart,parent,stcrt)
ROUTINE set_cart(p : XYZWPR; out_nde : MOTION_DATA_TYPE) FROM parent
declare_member(parent,set_rot,parent,strt)
ROUTINE set_rot(j1 : REAL; j2 : REAL; out_nde : MOTION_DATA_TYPE) FROM parent
declare_member(parent,set_component,parent,stcmp)
ROUTINE set_component(val : REAL; grp_no : INTEGER; comp_no : INTEGER; out_nde : MOTION_DATA_TYPE) FROM parent
$

%define impl_motion_getters_head(parent) $declare_member(parent,get_cart,parent,gtcrt)
ROUTINE get_cart(nde : MOTION_DATA_TYPE) : XYZWPR FROM parent
declare_member(parent,get_rot,parent,gtrot)
ROUTINE get_rot(nde : MOTION_DATA_TYPE) : JOINTPOS`ROT_AXES` FROM parent
declare_member(parent,get_component,parent,gtcmp)
ROUTINE get_component(nde : MOTION_DATA_TYPE; grp_no : INTEGER; comp_no : INTEGER) : REAL FROM parent$

%define impl_motion_operation_head(parent) $declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE FROM parent
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE FROM parent$

%define impl_motion_paths_head(parent) $declare_member(parent,approachPath,parent,appth)
ROUTINE approachPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR) FROM parent
declare_member(parent,retractPath,parent,rtpth)
ROUTINE retractPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR) FROM parent$

%mode pop

-- ***********
-- Define interface
-- ***********

%mode push
%mode string QQQ "$" "$" "\\"
%define impl_motion_members(parent) $
impl_motion_init_members(parent)
impl_motion_offsets_members(parent)
impl_motion_convert_members(parent)
impl_motion_setters_members(parent)
impl_motion_getters_members(parent)
impl_motion_operations_members(parent)
$
%mode pop


%mode push
%mode string QQQ "$" "$" "\\"

%define impl_motion_init_members(parent) $declare_member(parent,new_pose,parent,npose)
ROUTINE new_pose(x,y,z,w,p,r,j1,j2 : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE
  VAR
    nde : MOTION_DATA_TYPE
    arr : ARRAY[ROT_AXES] OF REAL
  BEGIN
    nde.pose = POS(x,y,z,w,p,r, cnfg)
    
    arr[POSITION_JNT] = j1
    arr[ROTARY_JNT] = j2
    nde.rot = pose__set_jointpos(arr)

    RETURN( nde )
  END new_pose

declare_member(parent,new_cart,parent,ncart)
ROUTINE new_cart(x,y,z,w,p,r : REAL; cnfg : CONFIG) : MOTION_DATA_TYPE
  VAR
    deg : REAL
    arr : ARRAY[ROT_AXES] OF REAL
    nde : MOTION_DATA_TYPE
  BEGIN
    IF (x = 0) AND (y = 0) THEN
      deg = 0
    ELSE
      deg = ATAN2(y, x)
    ENDIF
    IF (`PATH_OBJECT_NAME`__get_idod = 1) THEN deg = (deg-180) ; ENDIF
    nde.pose = POS(x,y,z,w,p,r, cnfg) 
    nde.pose.x = -1*nde.pose.x
    nde.pose.r = -1*nde.pose.r

    arr[POSITION_JNT] = DEFAULT_POS_JNT
    arr[ROTARY_JNT] = ROT_DIRECTION*deg
    nde.rot = pose__set_jointpos(arr)

    RETURN( nde )
  END new_cart
declare_member(parent,new_joint,parent,njnt)
ROUTINE new_joint(gp1_j1,gp1_j2,gp1_j3,gp1_j4,gp1_j5,gp1_j6,gp2_j1,gp2_j2 : REAL) : MOTION_DATA_JOINT_TYPE
  VAR
    arr : ARRAY[6] OF REAL
    arr2 : ARRAY[ROT_AXES] OF REAL
    nde : MOTION_DATA_JOINT_TYPE
  BEGIN
    arr[1] = gp1_j1; arr[2] = gp1_j2; arr[3] = gp1_j3; arr[4] = gp1_j4; arr[5] = gp1_j5; arr[6] = gp1_j6
    nde.pose = pose__set_jointpos(arr)

    arr2[POSITION_JNT] = gp2_j1
    arr2[ROTARY_JNT] = gp2_j2
    nde.rot = pose__set_jointpos(arr)

    RETURN( nde )
  END new_joint
$

%define impl_motion_offsets_members(parent) $declare_member(parent,make_tool_offset,parent,mktof)
ROUTINE make_tool_offset(ofst : XYZWPR) : MOTION_DATA_TYPE
  BEGIN
    RETURN(new_pose(ofst.x,ofst.y,ofst.z,ofst.w,ofst.p,ofst.r, 0, 0, ofst.config_data))
  END make_tool_offset

declare_member(parent,make_user_offset,parent,mkuof)
ROUTINE make_user_offset(toolprm : t_TOOL_VARS) : MOTION_DATA_TYPE
  VAR
    positnr_j1 : REAL
  BEGIN
    --positnr_j1 = toolprm.pitchLead
    positnr_j1 = 0
    RETURN(new_pose(0,0,0,0,0,0, positnr_j1,0, pose__set_config(DEFAULT_CONFIG)))
  END make_user_offset

%ifdef toolpath_structs_t
declare_member(parent,define_tool_offset,parent,dftof)
ROUTINE define_tool_offset(toolprm : t_TOOL_VARS) : MOTION_DATA_TYPE
  BEGIN
    --set tool offset
    RETURN(new_pose(0,0,0,(toolprm.orient.x + toolprm.pitch), toolprm.orient.y, toolprm.orient.z, toolprm.pitchLead, 0, pose__set_config(DEFAULT_CONFIG)) )

  END define_tool_offset
%endif
$

%define impl_motion_convert_members(parent) $
%ifdef pathlib_types_t
declare_member(parent,tpath2pos,parent,tppse)
ROUTINE tpath2pos(nde : t_TOOLPATH) : MOTION_DATA_TYPE
  VAR
    deg : REAL
    arr : ARRAY[ROT_AXES] OF REAL
    p : MOTION_DATA_TYPE
  BEGIN
    deg = ATAN2(nde.v.y, nde.v.x)
    IF (`PATH_OBJECT_NAME`__get_idod = 1) THEN deg = (deg-180) ; ENDIF
    p.pose = nde.v
    p.pose.x = -1*p.pose.x
    p.pose.r = -1*p.pose.r

    arr[POSITION_JNT] = DEFAULT_POS_JNT
    arr[ROTARY_JNT] = ROT_DIRECTION*deg
    p.rot = pose__set_jointpos(arr)
    
    RETURN(p)
  END tpath2pos
%endif

declare_member(parent,copy,parent,copy)
ROUTINE copy(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE)
  BEGIN
    nde2.pose = nde1.pose
    nde2.rot = nde1.rot
  END copy

declare_member(parent,copy_joint,parent,cpyj)
ROUTINE copy_joint(nde1 : MOTION_DATA_JOINT_TYPE; nde2 : MOTION_DATA_JOINT_TYPE)
  BEGIN
    nde2.pose = nde1.pose
    nde2.rot = nde1.rot
  END copy_joint

$

%define impl_motion_setters_members(parent) $declare_member(parent,set_lpos,parent,stlps)
ROUTINE set_lpos : MOTION_DATA_TYPE
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde.pose = pose__get_lpos(RBT_GRP)
    nde.rot = pose__get_jpos(ROT_GRP)

    RETURN( nde )
  END set_lpos

declare_member(parent,set_posereg,parent,stpr)
ROUTINE set_posereg(nde : MOTION_DATA_TYPE; reg_no : INTEGER)
  BEGIN
    pose__set_posreg_xyz(nde.pose, reg_no, RBT_GRP)
    pose__set_posreg_joint((nde.rot), reg_no, ROT_GRP)
  END set_posereg

declare_member(parent,set_cart,parent,stcrt)
ROUTINE set_cart(p : XYZWPR; out_nde : MOTION_DATA_TYPE)
  BEGIN
    out_nde.pose = p
  END set_cart

declare_member(parent,set_cart,parent,stcrt)
ROUTINE set_rot(j1 : REAL; j2 : REAL; out_nde : MOTION_DATA_TYPE)
  VAR
    arr : ARRAY[ROT_AXES] OF REAL
    jnt : JOINTPOS`ROT_AXES`
    status : INTEGER
  BEGIN
    arr[POSITION_JNT] = j1
    arr[ROTARY_JNT] = j2
    CNV_REL_JPOS(arr, jnt, status)

    out_nde.rot = jnt
  END set_rot

declare_member(parent,set_component,parent,stcmp)
ROUTINE set_component(val : REAL; grp_no : INTEGER; comp_no : INTEGER; out_nde : MOTION_DATA_TYPE)
  BEGIN
    SELECT grp_no OF
      CASE(RBT_GRP):
        SELECT comp_no OF
          CASE(1):
            out_nde.pose.x = val
          CASE(2):
            out_nde.pose.y = val
          CASE(3):
            out_nde.pose.z = val
          CASE(4):
            out_nde.pose.w = val
          CASE(5):
            out_nde.pose.p = val
          CASE(6):
            out_nde.pose.r = val
          ELSE:
            karelError(INVALID_TYPE_CODE, 'Component number is not valid', ER_ABORT)
        ENDSELECT
      CASE(ROT_GRP):
        out_nde.rot = pose__set_jointpos_axis((out_nde.rot), comp_no, val)
      ELSE:
          karelError(INVALID_TYPE_CODE, 'group number is not valid for get_component', ER_ABORT)
    ENDSELECT

  END set_component
$

%define impl_motion_getters_members(parent) $declare_member(parent,get_cart,parent,gtcrt)
ROUTINE get_cart(nde : MOTION_DATA_TYPE) : XYZWPR
  BEGIN
    RETURN(nde.pose)
  END get_cart

declare_member(parent,get_rot,parent,gtrot)
ROUTINE get_rot(nde : MOTION_DATA_TYPE) : JOINTPOS`ROT_AXES`
  BEGIN
    RETURN(nde.rot)
  END get_rot

declare_member(parent,get_component,parent,gtcmp)
ROUTINE get_component(nde : MOTION_DATA_TYPE; grp_no : INTEGER; comp_no : INTEGER) : REAL
  VAR
    status : INTEGER
    rotary : ARRAY[ROT_AXES] OF REAL
  BEGIN
    SELECT grp_no OF
      CASE(RBT_GRP):
        SELECT comp_no OF
          CASE(1):
            RETURN(nde.pose.x)
          CASE(2):
            RETURN(nde.pose.y)
          CASE(3):
            RETURN(nde.pose.z)
          CASE(4):
            RETURN(nde.pose.w)
          CASE(5):
            RETURN(nde.pose.p)
          CASE(6):
            RETURN(nde.pose.r)
          ELSE:
            karelError(INVALID_TYPE_CODE, 'Component number is not valid for get_component', ER_ABORT)
        ENDSELECT
      CASE(ROT_GRP):
        CNV_JPOS_REL(nde.rot, rotary, status)
        RETURN(rotary[comp_no])
      ELSE:
          karelError(INVALID_TYPE_CODE, 'group number is not valid for get_component', ER_ABORT)
    ENDSELECT

    RETURN(0)
  END get_component
$

%define impl_motion_operations_members(parent) $declare_member(parent,poseMul,parent,psmul)
ROUTINE poseMul(nde1 : MOTION_DATA_TYPE; nde2 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE
  VAR
    p : MOTION_DATA_TYPE
    jpos1, jpos2 : JOINTPOS
  BEGIN
    p.pose = nde1.pose:nde2.pose

    -- MUST dereference from GROUP first! 
    jpos1 = (nde1.rot)
    jpos2 = (nde2.rot)
    
    p.rot = pose__add_jpos(jpos1, jpos2)

    RETURN(p)
  END poseMul
  
declare_member(parent,poseInv,parent,psinv)
ROUTINE poseInv(nde1 : MOTION_DATA_TYPE) : MOTION_DATA_TYPE
  VAR
    p : MOTION_DATA_TYPE
  BEGIN
    p.pose = INV((nde1.pose))
    p.rot = nde1.rot
    RETURN(p)
  END poseInv
$

%define impl_motion_paths_members(parent) $declare_member(parent,approachPath,parent,appth)
ROUTINE approachPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR)
  VAR
%define APPROACH_DEGREE_DIFF 5
    lpos : XYZWPR
    spos, spos2 : VECTOR
    vpos1, vpos2 : VECTOR
    tngt : VECTOR
  BEGIN
    spos = VEC(origin.x,origin.y+offset.y,origin.z-idod*offset.z)
    spos2 = VEC(origin.x,origin.y,origin.z-idod*offset.z)

%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('* Approach *', CR)
    WRITE TPDISPLAY('spos: ', spos::6::2, CR)
    WRITE TPDISPLAY('spos2: ', spos2::6::2, CR)
%endif

    --get tangent from raster angle
    tngt = VEC((-1*COS(rast.dir*rast.angle)),(SIN(rast.dir*rast.angle)),0)

    --move to offset -> to zero poisition
    `PATH_OBJECT_NAME`__makeline(spos, spos2, (ZEROPOS(1)), PTH_LINKING, PTH_LINETO, stepSize, speed, 1, tngt)
    moveLine

    --origin point
    vpos1 = INV((origin)):spos2

    --get start position of path from drawing
    lpos = `PATH_OBJECT_NAME`__get_start_node
    vpos2 = VEC(lpos.x, lpos.y, lpos.z)

    --apply retract offset
    vpos2.z = vpos2.z-idod*offset.z

%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('vpos1: ', vpos1::6::2, CR)
    WRITE TPDISPLAY('vpos2: ', vpos2::6::2, CR)
%endif

    IF (coordSys=PTH_CYLINDER) THEN
      --move between origin and start degree
      IF (ABS(vpos2.x - vpos1.x) > APPROACH_DEGREE_DIFF) THEN
        -- ..note:: set travel direction in step size
        `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, tngt)
        moveArc
      ENDIF
    ENDIF

    IF (coordSys=PTH_CARTESAN) THEN
      `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, tngt)
      moveLine
    ENDIF

  END approachPath

declare_member(parent,retractPath,parent,rtpth)
ROUTINE retractPath(speed : REAL; stepSize : REAL; coordSys : INTEGER; idod : INTEGER; origin : XYZWPR; offset : XYZWPR)
  VAR
%define APPROACH_DEGREE_DIFF 5
    lpos : XYZWPR
    lposOffset : REAL
    vpos1, vpos2, vpos3 : VECTOR
    spos : VECTOR
    fpos : VECTOR
    tngt : VECTOR
  BEGIN

%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('* Retract *', CR)
%endif

    lpos = `PATH_OBJECT_NAME`__get_end_node
    --get into degress from 0-360
    lpos.x = lpos.x/origin.z*180/M_PI
    WRITE TPDISPLAY('deg: ', lpos.x::6::2, CR)
    lpos.x = lpos.x*origin.z*M_PI/180

    vpos1 = VEC(lpos.x, lpos.y, lpos.z)

    -- retract point
    vpos2 = vpos1
    vpos2.z = vpos1.z-idod*offset.z

%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('vpos1: ', vpos1::6::2, CR)
    WRITE TPDISPLAY('vpos2: ', vpos2::6::2, CR)
%endif

    --get tangent from raster angle
    tngt = VEC((-1*COS(rast.dir*rast.angle)),(SIN(rast.dir*rast.angle)),0)

    --move up from lpos to the retract height
    `PATH_OBJECT_NAME`__makeline(vpos1, vpos2, origin, PTH_LINKING, PTH_LINETO, stepSize, speed, 1, tngt)
    moveLine

    --convert into frame
    vpos3 = origin:vpos2

    -- get finish point
    fpos = VEC(vpos3.x,origin.y+offset.y,vpos3.z)

%ifdef DEBUG_BUILD
    WRITE TPDISPLAY('fpos: ', fpos::6::2, CR)
%endif

    --move from the origin to the retract distance to the offset
    `PATH_OBJECT_NAME`__makeline(vpos3, fpos, (ZEROPOS(1)), PTH_LINKING, PTH_LINETO, stepSize, speed, 1, tngt)
    moveLine

  END retractPath
$

%mode pop

%endif -- pathclass_interface_t
