PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'pathmotion'
%NOLOCKGROUP

%ifdef ROT_GRP
%ifeq ROT_GRP 0
%undef ROT_GRP
%endif
%endif
%ifdef TRACK_GRP
%ifeq TRACK_GRP 0
%undef TRACK_GRP
%endif
%endif

%include namespace.m

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%include errors.klt
%include systemlib.types.klt
%include systemvars.klt
%include math.klt
%include draw.klt
%include pose.const.klt
%include pathlib.klt
%include toolpath.structs.klt
%include motion.deps.klt

%ifdef motion_type
motion_type(MOTION_DATA_FILE)
%endif

%define BASE_CLASSNAME class_name


-- include reference to pathmake
-- "pth". This module is used to move
-- through this path.
%include pathmake.friend.members.klt
pathmake_friends(PATH_OBJECT_NAME)

VAR
  this : t_MOTION_PRM
  toolprm : t_TOOL_VARS
  tool_offset : MOTION_DATA_TYPE
  frame_offset : MOTION_DATA_TYPE
  --index 1 is for linear motion. index 2 is for circular motion.
  motion_prog : ARRAY[2] OF STRING[12]
  --used for setting the motion programs in 'set_prog_names'

%include systemlib.klh
%include errors.klh
%include pose.klh
%include pathlib.klh
%from registers.klh %import set_real, set_int
%from strings.klh %import pose_to_s, joint_to_s, i_to_s, vec_to_s, p_to_s

--define path object
path_make_define(PATH_OBJECT_NAME,CONFIG_FILENAME)

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif
%ifdef DEBUG_PLOT_POINTS
-- plot debug
%class usrplt('dispclass.klc','dispclass.klh')
%endif

%defeval class_name BASE_CLASSNAME

%include motion.klh

--implement robot config interface
impl_motion_members(MOTION_DATA_FILE)

%defeval class_name BASE_CLASSNAME

--public
ROUTINE new
  BEGIN
    tool_offset = DEFAULT_POSE
    frame_offset = DEFAULT_POSE

    this.interpolate = TRUE
    this.program_type = 1
    set_prog_names(this.program_type)
    this.ref_radius = 0

    --default speeds
    this.useSetSpeed = TRUE
    this.tool_speed = TOOLING_SPEED
    this.link_speed = LINKING_SPEED

    --set speed registers
    registers__set_real(SPEED_REGISTER, TOOLING_SPEED)
    registers__set_real(LINK_SPEED_REG, LINKING_SPEED)

    --default increments
    this.inDegrees = FALSE
    this.tool_step = TOOLING_STEP
    this.link_step = LINKING_STEP

    --approach/depart offsets
    this.start_offset = 0
    this.stop_offset = 0

    --initialize toolprm
    set_retract_dist(VEC(0, 50, 50))
    toolprm.perchDist.x = 0 ; toolprm.perchDist.y = 500 ; toolprm.perchDist.z = 150 ;

    set_orient(VEC(0, 0, 0))
    set_coordinate_system(PTH_CARTESAN, 3)
    set_idod(1)

    --set tooling entry/exit offsets
    set_tooling_entry
    set_tooling_exit
    set_tooling_start_offset
    set_tooling_stop_offset
  
  END new

ROUTINE init
  BEGIN
    this.interpolate = interp_
    this.program_type = prog_typ
    set_prog_names(this.program_type)
    this.ref_radius = ref_radius

    --default speeds
    this.useSetSpeed = useSetSpeed
    this.tool_speed = tool_speed
    this.link_speed = link_speed

    --set speed registers
    registers__set_real(SPEED_REGISTER, tool_speed)
    registers__set_real(LINK_SPEED_REG, link_speed)

    --default increments
    this.inDegrees = inDegrees
    this.tool_step = tool_step
    this.link_step = link_step

    --approach/depart offsets
    this.start_offset = 0
    this.stop_offset = 0

    --set offsets
    tool_offset = make_tool_offset(toolOffst)
    frame_offset = make_user_offset(0)

    --set tooling entry/exit offsets
      -- must be after setting tool_offset
    set_tooling_entry
    set_tooling_exit
    set_tooling_start_offset
    set_tooling_stop_offset

  END init

ROUTINE init2
  BEGIN 
    --toolparam
    toolprm = paths__new_tool_params(paths__toolvec_to_vec(toolprm_.retractDist), paths__toolvec_to_vec(toolprm_.perchDist), paths__toolvec_to_vec(toolprm_.orient), (toolprm_.pitch), (toolprm_.pitchLead), (toolprm_.idod), toolprm_.coordSys)

    this.interpolate = mtnprm.interpolate
    this.program_type = mtnprm.program_type
    set_prog_names(this.program_type)
    this.ref_radius = ref_radius

    --default speeds
    this.useSetSpeed = mtnprm.useSetSpeed
    this.tool_speed = mtnprm.tool_speed
    this.link_speed = mtnprm.link_speed

    --set speed registers
    registers__set_real(SPEED_REGISTER, mtnprm.tool_speed)
    registers__set_real(LINK_SPEED_REG, mtnprm.link_speed)

    --default increments
    this.inDegrees = mtnprm.inDegrees
    this.tool_step = mtnprm.tool_step
    this.link_step = mtnprm.link_step

    --approach/depart offsets
    this.start_offset = mtnprm.start_offset
    this.stop_offset = mtnprm.stop_offset

    -- sets offsets
    define_tool_offset(toolprm_)

    --set tooling entry/exit offsets
      -- must be after setting tool_offset
    set_tooling_entry
    set_tooling_exit
    set_tooling_start_offset
    set_tooling_stop_offset
    
  END init2

ROUTINE delete
  VAR
    uninit_mtn : t_MOTION_PRM
    uninit_tool : t_TOOL_VARS
  BEGIN
    --unitialize offset pose
    tool_offset = DEFAULT_POSE
    frame_offset = DEFAULT_POSE

    --uninit types
    this = uninit_mtn
    toolprm = uninit_tool

    --uninit motion programs
    motion_prog[1] = '' ; motion_prog[2] = ''
    this.program_type = 0
  END delete


-- setters

ROUTINE set_interpolation
  BEGIN
    this.interpolate = interp_
  END set_interpolation

ROUTINE set_tool_offset
  BEGIN
    tool_offset = make_tool_offset(toolOffst)
  END set_tool_offset

ROUTINE add_tool_offset
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde = make_tool_offset(toolOffst)
    tool_offset = poseMul(tool_offset, nde)
  END add_tool_offset

ROUTINE set_program_type
  BEGIN
    this.program_type = typ
  END set_program_type

ROUTINE set_prog_names
  BEGIN
    SELECT prog_typ OF
      CASE(MOVE_DRYRUN):
        motion_prog[1] = DRYRUN_LINE_PROG
%ifdef DRYRUN_CIRC_PROG
        motion_prog[2] = DRYRUN_CIRC_PROG
%else
        motion_prog[2] = ''
%endif
      CASE(MOVE_WORKING):
        motion_prog[1] = WORK_LINE_PROG
%ifdef WORK_CIRC_PROG
        motion_prog[2] = WORK_CIRC_PROG
%else
        motion_prog[2] = ''
%endif
      CASE(MOVE_SCANING):
        motion_prog[1] = SCAN_LINE_PROG
%ifdef SCAN_CIRC_PROG
        motion_prog[2] = SCAN_CIRC_PROG
%else
        motion_prog[2] = ''
%endif
      ELSE:
        motion_prog[1] = ''
        motion_prog[2] = ''
        karelError(INVALID_TYPE_CODE,'motion program type in classname must be set before running', ER_ABORT)
    ENDSELECT
    
  END set_prog_names

ROUTINE set_speeds
  BEGIN
    this.useSetSpeed = useSetSpeed
    this.tool_speed = tool_speed
    this.link_speed = link_speed
  END set_speeds

ROUTINE set_increments
  BEGIN
    this.inDegrees = inDegrees
    this.tool_step = tool_step
    this.link_step = link_step
  END set_increments

ROUTINE set_coordinate_system
  BEGIN
    toolprm.coordSys.system = system
    toolprm.coordSys.z_axis = z_axis
  END set_coordinate_system

ROUTINE set_retract_dist
  BEGIN
    toolprm.retractDist.x = retractDist.x ; 
    toolprm.retractDist.y = retractDist.y ; 
    toolprm.retractDist.z = retractDist.z ;
  END set_retract_dist

ROUTINE set_orient
  BEGIN
    toolprm.orient.x = orient.x ; 
    toolprm.orient.y = orient.y ; 
    toolprm.orient.z = orient.z ;
  END set_orient

ROUTINE set_idod
  BEGIN
    toolprm.idod = i
  END set_idod

ROUTINE set_tooling_entry
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde = new_cart((this.start_offset + (APPROACH_OFFSET_MM)),0,0,0,0,0, (ZEROPOS(1).config_data))
    
    --multiply through with tool offset
    nde = poseMul(tool_offset, nde)

    set_posereg(nde, APPROACH_OFFSET_REG)
  END set_tooling_entry

ROUTINE set_tooling_exit
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde = new_cart((this.stop_offset + (DEPART_OFFSET_MM)),0,0,0,0,0, (ZEROPOS(1).config_data))
    
    --multiply through with tool offset
    nde = poseMul(tool_offset, nde)

    set_posereg(nde, DEPART_OFFSET_REG)
  END set_tooling_exit

ROUTINE set_tooling_start_offset
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde = new_cart((this.start_offset),0,0,0,0,0, (ZEROPOS(1).config_data))
    
    --multiply through with tool offset
    nde = poseMul(tool_offset, nde)

    set_posereg(nde, LASER_START_OFFSET_REG)
  END set_tooling_start_offset

ROUTINE set_tooling_stop_offset
  VAR
    nde : MOTION_DATA_TYPE
  BEGIN
    nde = new_cart((this.stop_offset),0,0,0,0,0, (ZEROPOS(1).config_data))
    
    --multiply through with tool offset
    nde = poseMul(tool_offset, nde)

    set_posereg(nde, LASER_STOP_OFFSET_REG)
  END set_tooling_stop_offset

ROUTINE run_approach_path
  BEGIN
    approachPath(speed, stepSize, coordSys, idod, origin, offset)
  END run_approach_path

ROUTINE run_retract_path
  BEGIN
    retractPath(speed, stepSize, coordSys, idod, origin, offset)
  END run_retract_path

ROUTINE aquire_groups
  VAR
    status : INTEGER
  BEGIN
    --lock groups
    LOCK_GROUP(CELL_GRPMASK, status)


    --set frames
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
%ifdef ROT_GRP
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)
%endif
%ifdef TRACK_GRP
    pose__set_userframe(USER_FRAME_NO, TRACK_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, TRACK_GRP)
%endif

  END aquire_groups

ROUTINE release_groups
  VAR
    status : INTEGER
  BEGIN
    UNLOCK_GROUP(CELL_GRPMASK,status)
  END release_groups

--*******
-- Movement Functions
--*******

ROUTINE move
  BEGIN
    --..warning:: toolprm needs to be initialize with init2, or set_retract_dist
    
    --move though path
    IF (use_arc) THEN
      movePolyArc((this.tool_speed), (this.tool_step), (this.link_speed), (this.link_step), -1*(toolprm.retractDist.z), (this.useSetSpeed) )
    ELSE
      movePoly((this.tool_speed), (this.tool_step), (this.link_speed), (this.link_step), -1*(toolprm.retractDist.z), (this.useSetSpeed) )
    ENDIF
  END move

ROUTINE moveApproach
  BEGIN
    --..warning:: toolprm needs to be initialize with init2, or set_retract_dist/set_coordinate_system/set_idod

    --approach path
    approachPath((this.link_speed), (this.link_step), (toolprm.coordSys.system), (toolprm.idod), `PATH_OBJECT_NAME`__get_origin, POS((toolprm.perchDist.x),(toolprm.perchDist.y),(toolprm.perchDist.z),0,0,0, (ZEROPOS(1).config_data)))
  END moveApproach

ROUTINE moveRetract
  BEGIN
    --retract path
    retractPath((this.link_speed), (this.link_step), (toolprm.coordSys.system), (toolprm.idod), `PATH_OBJECT_NAME`__get_origin, POS((toolprm.perchDist.x),(toolprm.perchDist.y),(toolprm.perchDist.z),0,0,0, (ZEROPOS(1).config_data)))
  END moveRetract

ROUTINE movePos
  VAR
    nde : MOTION_DATA_TYPE
    tpos : t_TOOLPATH
  BEGIN
    --set tool orientation
    set_posereg(tool_offset, TOOL_OFFSET_REG)

    --set code and type for tp
    registers__set_int(CODE_REGISTER, PTH_MOVETO)
    registers__set_int(TYPE_REGISTER, line_typ)
    registers__set_int(TERM_REGISTER, TERM_FINE)

    --set pose
    tpos = paths__new_tpath(pos, PTH_MOVETO, line_typ, speed, tangent)
    
    --set speed
    tpos.speed = speed
    registers__set_real(SPEED_REGISTER, speed)
    --set inc
    registers__set_int(REG_I, 1)

    nde = tpath2pos(tpos)
    --multiply in user offset
    nde = poseMul(nde, frame_offset)
    --set posreg for TP program
    set_posereg(nde, POSE_REG)
    --move to pose
    CALL_PROG(motion_prog[1], 0)

  END movePos

ROUTINE moveLine
  VAR
    i : INTEGER
    nde : MOTION_DATA_TYPE
  BEGIN
    --set tool orientation
    set_posereg(tool_offset, TOOL_OFFSET_REG)

    IF (motion_prog[1] = '') THEN
      karelError(VAR_UNINIT,'linear motion program in class_name needs to be set', ER_ABORT)
    ENDIF

    FOR i=1 TO PATH_LEN(pth) DO
      --set code and type for tp
      registers__set_int(CODE_REGISTER, (pth[i].code))
      registers__set_int(TYPE_REGISTER, (pth[i].typ))

      --set speed
      registers__set_real(SPEED_REGISTER, (pth[i].speed))
      --set inc
      registers__set_int(REG_I, i)

      --set termination for tp
      SELECT (pth[i].code) OF
        CASE(PTH_MOVETO,PTH_CLOSE): registers__set_int(TERM_REGISTER, TERM_FINE) ;
        ELSE: registers__set_int(TERM_REGISTER, TERM_CONT) ;
      ENDSELECT

      --set pose
      nde = tpath2pos(pth[i])
      --multiply in user offset
      nde = poseMul(nde, frame_offset)
      --set posreg for TP program
      set_posereg(nde, POSE_REG)
      --move to pose
      CALL_PROG(motion_prog[1], 0)
    ENDFOR
  END moveLine

ROUTINE moveArc
  VAR
    i, status : INTEGER
    nde, nde_tool : MOTION_DATA_TYPE
  BEGIN
    --make tool offset pose to be multiplied in
    --as circular_move does not allow the use of
    --the tool_offset modifier
    nde_tool = poseInv(tool_offset)

    IF (motion_prog[1] = '') OR (motion_prog[2] = '') THEN
      karelError(VAR_UNINIT,'motion programs in class_name needs to be set', ER_ABORT)
    ENDIF

    --linear move to start of path
    --LS program should handle PTH_MOVETO case
      --set code and type for tp
    IF PATH_LEN(pth) > 0 THEN
    --circular move
      registers__set_int(CODE_REGISTER, (pth[1].code))
      registers__set_int(TYPE_REGISTER, (pth[1].typ))
      registers__set_int(TERM_REGISTER, TERM_FINE)

      --set speed
      registers__set_real(SPEED_REGISTER, (pth[1].speed))
      --set inc
      registers__set_int(REG_I, 1)

        --set pose
      nde = tpath2pos(pth[1])
      --multiply tool offset
      nde = poseMul(nde, nde_tool)
      --multiply in user offset
      nde = poseMul(nde, frame_offset)
      --set posreg for TP program
      set_posereg(nde, ARC_REG1)
        --move to pose
      CALL_PROG(motion_prog[2], 0)
    ENDIF

    --for circular motion need to define the next two points for motion
    --LS program should handle PTH_CLOSE case
    i = 2
    WHILE i < PATH_LEN(pth) DO
      --set code and type for tp
        -- needed to properly select FINE or CONT motion statement
      registers__set_int(CODE_REGISTER, (pth[i+1].code))
      registers__set_int(TYPE_REGISTER, (pth[i+1].typ))
      registers__set_int(TERM_REGISTER, TERM_CONT) ;

      --set speed
      registers__set_real(SPEED_REGISTER, (pth[i+1].speed))
      --set inc
      registers__set_int(REG_I, i+1)

      --Do not use cicular_move if less than 3 points
      IF PATH_LEN(pth) < 3 THEN
      --linear move
        set_posereg(tool_offset, TOOL_OFFSET_REG)
        nde = tpath2pos(pth[i])
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, POSE_REG)
      --move to pose
        CALL_PROG(motion_prog[1], 0)
      ELSE
      --circular move

        --set midpoint
        nde = tpath2pos(pth[i])
        --multiply tool offset
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG1)

        --set endpoint
        nde = tpath2pos(pth[i+1])
        --multiply tool offset
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG2)

        CALL_PROG(motion_prog[2], 0)
      ENDIF

      i = i + 2
    ENDWHILE
  END moveArc

ROUTINE movePoly
  VAR
    i : INTEGER
    nde : MOTION_DATA_TYPE
    pass : INTEGER
  BEGIN
    --set tool orientation
    set_posereg(tool_offset, TOOL_OFFSET_REG)

    IF (motion_prog[1] = '') THEN
      karelError(VAR_UNINIT,'linear motion program in class_name needs to be set', ER_ABORT)
    ENDIF

    pass = 0
    REPEAT
%ifdef DEBUG_BUILD
    usrdis__print(INFO, '# Running Pass: ' + i_to_s(pass))
%endif
%ifdef DEBUG_PLOT_POINTS
    usrplt__print(INFO, '# Running Pass: ' + i_to_s(pass))
%endif

      `PATH_OBJECT_NAME`__next_toolpath(tool_speed, tool_step, use_tool_spd, link_speed, link_step, retract_hght, this.interpolate)

      FOR i=1 TO PATH_LEN(pth) DO
        --set code and type for tp
        registers__set_int(CODE_REGISTER, (pth[i].code))
        registers__set_int(TYPE_REGISTER, (pth[i].typ))
        --set termination type along path
        SELECT pth[i].code OF
          CASE(PTH_MOVETO,PTH_CLOSE): registers__set_int(TERM_REGISTER, TERM_FINE) ;
          ELSE: registers__set_int(TERM_REGISTER, TERM_CONT) ;
        ENDSELECT
        --set speed
        registers__set_real(SPEED_REGISTER, pth[i].speed)
        --set inc
        registers__set_int(REG_I, i)

        --set pose
        nde = tpath2pos(pth[i])
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, POSE_REG)
        --move to pose
        CALL_PROG(motion_prog[1], 0)
      ENDFOR

      pass = pass + 1
    UNTIL(`PATH_OBJECT_NAME`__is_path_end)

  END movePoly

ROUTINE movePolyArc
  VAR
    i, status : INTEGER
    nde, nde_tool : MOTION_DATA_TYPE
    pass : INTEGER
  BEGIN
    --make tool offset pose to be multiplied in
    --as circular_move does not allow the use of
    --the tool_offset modifier
    nde_tool = poseInv(tool_offset)

    IF (motion_prog[1] = '') OR (motion_prog[2] = '') THEN
      karelError(VAR_UNINIT,'motion programs in class_name needs to be set', ER_ABORT)
    ENDIF

    pass = 0
    REPEAT
%ifdef DEBUG_BUILD
    usrdis__print(INFO, '# Running Pass: ' + i_to_s(pass))
%endif
%ifdef DEBUG_PLOT_POINTS
    usrplt__print(INFO, '# Running Pass: ' + i_to_s(pass))
%endif

      `PATH_OBJECT_NAME`__next_toolpath(tool_speed, tool_step, use_tool_spd, link_speed, link_step, retract_hght, this.interpolate)

      --** start point of the circle **
      --linear move to start of path
        --set code and type for tp
      IF PATH_LEN(pth) > 0 THEN
      --circular move
        registers__set_int(CODE_REGISTER, (pth[1].code))
        registers__set_int(TYPE_REGISTER, (pth[1].typ))
        registers__set_int(TERM_REGISTER, TERM_FINE)
          --set speed
        registers__set_real(SPEED_REGISTER, pth[1].speed)
        --set inc
        registers__set_int(REG_I, 1)

          --set pose
        nde = tpath2pos(pth[1])
        --multiply tool offset
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG1)
          --move to pose
        CALL_PROG(motion_prog[2], 0)
      ENDIF

      --** midpoints and finish point of the circle **
      i = 2  --start after first point
      WHILE i < PATH_LEN(pth) DO
        --Do not use cicular_move if less than 3 points
        IF PATH_LEN(pth) < 3 THEN
          --linear move
          set_posereg(tool_offset, TOOL_OFFSET_REG)

          --set registers
          registers__set_int(CODE_REGISTER, (pth[i].code))
          registers__set_int(TYPE_REGISTER, (pth[i].typ))
          --set termination type along path
          SELECT pth[i].code OF
            CASE(PTH_MOVETO,PTH_CLOSE): registers__set_int(TERM_REGISTER, TERM_FINE) ;
            ELSE: registers__set_int(TERM_REGISTER, TERM_CONT) ;
          ENDSELECT
            --set speed
          registers__set_real(SPEED_REGISTER, pth[i].speed)
          --set inc
          registers__set_int(REG_I, i)

          nde = tpath2pos(pth[i])
          --multiply in user offset
          nde = poseMul(nde, frame_offset)
          --set posreg for TP program
          set_posereg(nde, POSE_REG)
          --move to pose
          CALL_PROG(motion_prog[1], 0)
        ELSE
          --circular move
          --set code and type for tp
            -- needed to properly select FINE or CONT motion statement
          registers__set_int(CODE_REGISTER, (pth[i+1].code))
          registers__set_int(TYPE_REGISTER, (pth[i+1].typ))
          --set termination type along path
          registers__set_int(TERM_REGISTER, TERM_CONT)
            --set speed
          registers__set_real(SPEED_REGISTER, pth[i+1].speed)
          --set inc
          registers__set_int(REG_I, i+1)

          --set midpoint
          nde = tpath2pos(pth[i])
          --multiply in tool offset
          nde = poseMul(nde, nde_tool)
          --multiply in user offset
          nde = poseMul(nde, frame_offset)
          --set posreg for TP program
          set_posereg(nde, ARC_REG1)

          --set endpoint
          nde = tpath2pos(pth[i+1])
          --multiply in tool offset
          nde = poseMul(nde, nde_tool)
          --multiply in user offset
          nde = poseMul(nde, frame_offset)
          --set posreg for TP program
          set_posereg(nde, ARC_REG2)

          CALL_PROG(motion_prog[2], 0)
        ENDIF

        i = i + 2
      ENDWHILE

      pass = pass + 1
    UNTIL(`PATH_OBJECT_NAME`__is_path_end)

  END movePolyArc

-- ..danger:: ISSUE WITH MOVEFULL PATH FUNCTIONS. DO NOT USE BELOW!!! 

ROUTINE movePolyFull
  VAR
    i : INTEGER
    nde : MOTION_DATA_TYPE
  BEGIN
    --set tool orientation
    set_posereg(tool_offset, TOOL_OFFSET_REG)

    `PATH_OBJECT_NAME`__get_toolpath(tool_speed, tool_step, use_tool_spd, link_speed, link_step, retract_hght, this.interpolate)

    IF (motion_prog[1] = '') THEN
      karelError(VAR_UNINIT,'linear motion program in class_name needs to be set', ER_ABORT)
    ENDIF

    FOR i=1 TO PATH_LEN(pth) DO
      --set code and type for tp
      registers__set_int(CODE_REGISTER, (pth[i].code))
      registers__set_int(TYPE_REGISTER, (pth[i].typ))
      --set termination for tp
      SELECT pth[i].code OF
        CASE(PTH_MOVETO,PTH_CLOSE): registers__set_int(TERM_REGISTER, TERM_FINE) ;
        ELSE: registers__set_int(TERM_REGISTER, TERM_CONT) ;
      ENDSELECT

      --set pose
      nde = tpath2pos(pth[i])
      --multiply in user offset
      nde = poseMul(nde, frame_offset)
      --set posreg for TP program
      set_posereg(nde, POSE_REG)
      --move to pose
      CALL_PROG(motion_prog[1], 0)
    ENDFOR

  END movePolyFull

ROUTINE movePolyArcFull
  VAR
    i : INTEGER
    startCode,endCode : INTEGER
    nde, nde_tool : MOTION_DATA_TYPE
  BEGIN
    --make tool offset pose to be multiplied in
    --as circular_move does not allow the use of
    --the tool_offset modifier
    nde_tool = poseInv(tool_offset)

    --set tool orientation
    set_posereg(tool_offset, TOOL_OFFSET_REG)

    `PATH_OBJECT_NAME`__get_toolpath(tool_speed, tool_step, use_tool_spd, link_speed, link_step, retract_hght, this.interpolate)

    startCode = pth[1].code
    endCode = paths__opposite_code(startCode)

    IF (motion_prog[1] = '') OR (motion_prog[2] = '') THEN
      karelError(VAR_UNINIT,'motion programs in class_name needs to be set', ER_ABORT)
    ENDIF

    i = 1
    WHILE i < PATH_LEN(pth) DO
      IF pth[i].code = startCode THEN
      --circular move
        registers__set_int(CODE_REGISTER, PTH_MOVETO)
        registers__set_int(TYPE_REGISTER, (pth[i].typ))
        registers__set_int(TERM_REGISTER, TERM_FINE)
          --set pose
        nde = tpath2pos(pth[i])
        --multiply in tool offset
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG1)
          --move to pose
        CALL_PROG(motion_prog[2], 0)

        endCode = paths__opposite_code(startCode)

        i = i + 1
      ELSE IF pth[i].code = endCode THEN
      --linear move
        registers__set_int(CODE_REGISTER, PTH_CLOSE)
        registers__set_int(TYPE_REGISTER, (pth[i].typ))
        registers__set_int(TERM_REGISTER, TERM_FINE)
        set_posereg(tool_offset, TOOL_OFFSET_REG)

        --set pose
        nde = tpath2pos(pth[i])
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, POSE_REG)
        --move to pose
        CALL_PROG(motion_prog[1], 0)

        i = i + 1
      ELSE IF pth[i+1].code = endCode THEN
      --circular move
        registers__set_int(CODE_REGISTER, PTH_CLOSE)
        registers__set_int(TYPE_REGISTER, (pth[i+1].typ))
        registers__set_int(TERM_REGISTER, TERM_CONT)

        --set midpoint
        nde = tpath2pos(pth[i])
        --multiply in tool offset
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG1)

        --set endpoint
        nde = tpath2pos(pth[i+1])
        --set posreg for TP program
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        set_posereg(nde, ARC_REG2)

        --move to pose
        CALL_PROG(motion_prog[2], 0)
        
        IF (i + 2) < PATH_LEN(pth) THEN
          startCode = pth[i + 2].code
        ENDIF
        i = i + 2
      ELSE
        registers__set_int(CODE_REGISTER, (pth[i+1].code))
        registers__set_int(TYPE_REGISTER, (pth[i+1].typ))
        registers__set_int(TERM_REGISTER, TERM_CONT)

        --set midpoint
        nde = tpath2pos(pth[i])
        nde = poseMul(nde, nde_tool)
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG1)

        --set endpoint
        nde = tpath2pos(pth[i+1])
        --multiply in user offset
        nde = poseMul(nde, frame_offset)
        --set posreg for TP program
        set_posereg(nde, ARC_REG2)
        --move to pose
        CALL_PROG(motion_prog[2], 0)

        i = i + 2
      ENDIF
      ENDIF
      ENDIF
    ENDWHILE

  END movePolyArcFull


BEGIN
END class_name
