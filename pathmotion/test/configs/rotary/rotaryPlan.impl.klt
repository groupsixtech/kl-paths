--include default interface
%include pathplan.interface.klt

-- ***********
-- Define interface header
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define define_pplan_headers(parent) `declare_member(parent,dist_to_weight,parent,d2wt)
ROUTINE dist_to_weight(dist : KDTREE_COMPARE_TYPE) : GRAPH_EDGE_VTYPE FROM parent
declare_member(parent,convert2pos,parent,cn2ps)
ROUTINE convert2pos(n : t_VEC_PATH ; ofst_orient : VECTOR; parent_frm : XYZWPR) : XYZWPR FROM parent
declare_member(parent,speed_blending,parent,spdbl)
ROUTINE speed_blending(start_speed : REAL ; end_speed : REAL; blendRatio : REAL; outNode : t_TOOLPATH) FROM parent
declare_member(parent,path_blending,parent,pthbl)
ROUTINE path_blending(p : PATH nodedata = t_TOOLPATH ; i : INTEGER; parent_frm : XYZWPR; blendRatio : REAL; outNode : t_TOOLPATH) FROM parent
declare_member(parent,convertOrientation,parent,cnvor)
ROUTINE convertOrientation(p : PATH nodedata = t_TOOLPATH ; frm : XYZWPR; radius : REAL; system : INTEGER; z_axis : INTEGER; flip : BOOLEAN) FROM parent
declare_member(parent,linkingTransition,parent,lktrs)
ROUTINE linkingTransition(p : PATH nodedata = t_TOOLPATH; spacing : REAL; idod : INTEGER) FROM parent
`
%mode pop

-- ***********
-- Define interface
-- ***********

%mode push
%mode string QQQ "`" "`" "\\"

%define define_pplan_members(parent) `declare_member(parent,dist_to_weight,parent,d2wt)
ROUTINE dist_to_weight(dist : KDTREE_COMPARE_TYPE) : GRAPH_EDGE_VTYPE
  BEGIN
    RETURN(TRUNC(dist))
  END dist_to_weight
declare_member(parent,convert2pos,parent,cn2ps)
ROUTINE convert2pos(n : t_VEC_PATH ; ofst_orient : VECTOR; parent_frm : XYZWPR) : XYZWPR
  BEGIN
    -- ( pose__vector_to_pose(frm:v.v, pose__get_orientation(frm), frm.config_data) )
    RETURN( pose__vector_to_pose(n.v, ofst_orient, parent_frm.config_data) )
  END convert2pos
declare_member(parent,speed_blending,parent,spdbl)
ROUTINE speed_blending(start_speed : REAL ; end_speed : REAL; blendRatio : REAL; outNode : t_TOOLPATH)
  BEGIN
    outNode.speed = blendRatio*start_speed + (1-blendRatio)*end_speed
  END speed_blending
declare_member(parent,path_blending,parent,pthbl)
ROUTINE path_blending(p : PATH nodedata = t_TOOLPATH ; i : INTEGER; parent_frm : XYZWPR; blendRatio : REAL; outNode : t_TOOLPATH)
  VAR
    v1, v2 : VECTOR
    vs, os : VECTOR
  BEGIN
    v1 = pose__pose_to_vector(p[i].v)
    v2 = pose__pose_to_vector(p[i+1].v)

    vs = blendRatio*v2 + (1-blendRatio)*v1
    os = pose__get_orientation(p[i].v)

    outNode.v = parent_frm:POS(vs.x, vs.y, vs.z, os.x, os.y, os.z, parent_frm.config_data)
    outNode.tangent = p[i].tangent

    speed_blending((p[i].speed), (p[i+1].speed), blendRatio, outNode)

  END path_blending
declare_member(parent,convertOrientation,parent,cnvor)
ROUTINE convertOrientation(p : PATH nodedata = t_TOOLPATH ; frm : XYZWPR; radius : REAL; system : INTEGER; z_axis : INTEGER; flip : BOOLEAN)
  VAR
    i : INTEGER
    surfpos : XYZWPR
  BEGIN
    --convert to cartesian
    SELECT (system) OF
      CASE(PTH_CYLINDER):
        FOR i=1 TO PATH_LEN(p) DO
          --convert surface arc into degrees
          surfpos = p[i].v
          surfpos.x = surfpos.x/radius*180/M_PI
          --convert coordinates
          p[i].v = pose__cylindrical_to_cartesian(frm, (surfpos), (z_axis))

          p[i].v.w = p[i].v.w + surfpos.w ; p[i].v.p = p[i].v.p + surfpos.p ; p[i].v.r = p[i].v.r + surfpos.r ;
          --rotation for VERT_AXES
          IF (z_axis = VERT_AXES) THEN
            p[i].v.w = p[i].v.w - 90
          ENDIF

          IF flip THEN
            p[i].v.w = p[i].v.w + 180 ;
          ENDIF
        ENDFOR
      CASE(PTH_POLAR):
        FOR i=1 TO PATH_LEN(p) DO
          --convert surface uv into theta and phi angles
          surfpos = p[i].v
          surfpos.x = surfpos.x/radius*180/M_PI
          surfpos.y = surfpos.y/radius*180/M_PI
          --convert coordinates
          p[i].v = pose__polar_to_cartesian(frm, (surfpos), (z_axis))

          p[i].v.w = p[i].v.w + surfpos.w ; p[i].v.p = p[i].v.p + surfpos.p ; p[i].v.r = p[i].v.r + surfpos.r ;

          IF flip THEN
            p[i].v.w = p[i].v.w + 180 ;
          ENDIF
        ENDFOR
      CASE(PTH_CARTESAN):
      ELSE:
    ENDSELECT
  END convertOrientation
declare_member(parent,linkingTransition,parent,lktrs)
ROUTINE linkingTransition(p : PATH nodedata = t_TOOLPATH; spacing : REAL; idod : INTEGER)
  VAR
%define LINKING_FULL_WRAP 180
    endpnts : ARRAY[2] OF XYZWPR
    status : INTEGER
  BEGIN
    --If rotary group (ROT_GRP) and line is < 90 deg
    --only include endpoints in line. If path is 0->360
    --it will not rotate all the way back around
    endpnts[1] = tool_segment[1].v
    endpnts[2] = tool_segment[PATH_LEN(tool_segment)].v
    IF UNINIT(endpnts[1]) THEN
      paths__clear_toolpath(p)
    ELSE
      --need to evaluate how close the endpoints are in degree to eachother.
      --if > than epsilon run an arc
      IF(ABS((endpnts[2].x/frm.z*180/M_PI)-(endpnts[1].x/frm.z*180/M_PI)) < LINKING_FULL_WRAP) THEN
        get_toolpath_interpolate(spacing, PTH_LINETO, FALSE, p)
      ELSE
        --add 360 to endpnt 2 so that it is always rotating forward
        endpnts[2].x = (endpnts[2].x/frm.z*180/M_PI) - idod*360
        endpnts[2].x = (endpnts[2].x*frm.z*M_PI/180)
        --put back into tool segment to interpolate
        tool_segment[PATH_LEN(tool_segment)].v = endpnts[2]

        reverse_toolpath

        get_toolpath_interpolate(spacing, PTH_LINETO, FALSE, p)
      ENDIF
    ENDIF
  END linkingTransition
`
%mode pop