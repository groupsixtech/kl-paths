PROGRAM test_pplan
%NOLOCKGROUP
%STACKSIZE = 600

%define TOOLING_STEP 6
%define LINKING_STEP 10

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%include display.c.klt
%endif

%include systemlib.types.klt
%include systemvars.klt
%include pathlib.klt
%include pathplan.klt
%include draw.klt

VAR
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH
  polygon : PATH nodedata = t_VERTEX
  path_plan : PATH nodedata = t_INTEGER

%include kunit.klh
%from strings.klh %import s_to_iarr
%from systemlib.klh %import VEC, VEC2D
%include pathlib.klh

--tsp object
%class tstpln('pathplan.klc','pathplan.klh','vecpathplan.klt')
--draw object
%class tstpoly('polygon.klc', 'polygon.klh')

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

ROUTINE clear_poly(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE clear_list(p : PATH nodedata = t_INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_list

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE draw_delta(rast_ang : REAL ; pitch : REAL)
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 8)   
    polygon[1].coords = VEC2D(-40,10)   
    polygon[2].coords = VEC2D(-10,40)   
    polygon[3].coords = VEC2D(0,0)
    polygon[4].coords = VEC2D(10,40)
    polygon[5].coords = VEC2D(40,10)   
    polygon[6].coords = VEC2D(20,60)   
    polygon[7].coords = VEC2D(0,120)
    polygon[8].coords = VEC2D(-20,60)

    --initialize polygon object
    tstpln__delete
    tstpoly__init((ZEROPOS(1)), TRUE)
    tstpoly__set_canvas((ZEROPOS(1)))
    tstpoly__append_polygon(polygon)

    --raster polygon
    tstpoly__set_params(rast_ang, 1, 1, 0, pitch)
    tstpoly__raster(PTH_LINETO)

  END draw_delta

ROUTINE draw_multi(rast_ang : REAL ; pitch : REAL)
  BEGIN
    tstpln__delete
    tstpoly__delete

    --create polygon
    tstpoly__init((ZEROPOS(1)), FALSE)

    clear_poly(polygon)
    append_nodes(polygon, 4)
    polygon[1].coords = VEC2D(0,30)   
    polygon[2].coords = VEC2D(30,30)   
    polygon[3].coords = VEC2D(30,60)
    polygon[4].coords = VEC2D(0,60)
    tstpoly__append_polygon(polygon)
   
    polygon[1].coords = VEC2D(60,30)   
    polygon[2].coords = VEC2D(90,30)   
    polygon[3].coords = VEC2D(90,60)
    polygon[4].coords = VEC2D(60,60)
    tstpoly__append_polygon(polygon)
         
    polygon[1].coords = VEC2D(120,30) 
    polygon[2].coords = VEC2D(150,30)
    polygon[3].coords = VEC2D(150,60)
    polygon[4].coords = VEC2D(120,60)
    tstpoly__append_polygon(polygon)

    --raster polygon
    tstpoly__set_params(rast_ang, 1, 1, 0, pitch)
    tstpoly__raster(PTH_LINETO)

  END draw_multi

ROUTINE check_idx(idx : INTEGER; poly_dep : BOOLEAN)
  VAR
    qry : T_RASTQUERY
  BEGIN
    qry = get_neighbors(idx, poly_dep)
    IF NOT UNINIT(qry[1].idx) THEN WRITE TPDISPLAY(CR, 'up:', lines[qry[1].idx].v::5::2) ; ENDIF
    IF NOT UNINIT(qry[2].idx) THEN WRITE TPDISPLAY(CR, 'down:', lines[qry[2].idx].v::5::2) ; ENDIF
    IF NOT UNINIT(qry[3].idx) THEN WRITE TPDISPLAY(CR, 'right:', lines[qry[3].idx].v::5::2) ; ENDIF
    IF NOT UNINIT(qry[4].idx) THEN WRITE TPDISPLAY(CR, 'left:', lines[qry[4].idx].v::5::2) ; ENDIF
    IF NOT UNINIT(qry[5].idx) THEN WRITE TPDISPLAY(CR, 'diagu:', lines[qry[5].idx].v::5::2) ; ENDIF
    IF NOT UNINIT(qry[6].idx) THEN WRITE TPDISPLAY(CR, 'diagd:', lines[qry[6].idx].v::5::2) ; ENDIF
  END check_idx


-- ****************

ROUTINE t_NN : BOOLEAN
  VAR
    rast_ang : REAL
    start_corner : INTEGER
    start_nde : INTEGER
    i : INTEGER
    act, exp : ARRAY[20] OF INTEGER
    bbox : t_RECT
    apprch_pnt : t_VEC_PATH 
  BEGIN
    clear_list(path_plan)

    --set raster angle
    rast_ang = 0
    start_corner = 1

    draw_delta(rast_ang, 10)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    tstpln__init(lines, POS(0,0,0,0,0,rast_ang, (ZEROPOS(1).config_data)))
    tstpln__NN_graph
     --get start node
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act) DO
      act[i] =  path_plan[i].v
    ENDFOR

    exp[1] = 3;    exp[2] = 4;    exp[3] = 9;    exp[4] = 10;   exp[5] = 11;
    exp[6] = 12;   exp[7] = 6;    exp[8] = 5;    exp[9] = 1;    exp[10] = 2;
    exp[11] = 13;  exp[12] = 14;  exp[13] = 7;   exp[14] = 8;   exp[15] = 16;
    exp[16] = 15;  exp[17] = 17;  exp[18] = 18;  exp[19] = 20;  exp[20] = 19;

    RETURN(kunit_eq_ari(exp, act))
  END t_NN

ROUTINE t_rast_neigh : BOOLEAN
  VAR
    rast_ang : REAL
    start_corner : INTEGER
    i : INTEGER
    bbox : t_RECT
    query : T_RASTQUERY
    act1, exp1 : ARRAY[6] OF INTEGER
    act2, exp2 : ARRAY[6] OF INTEGER
    act3, exp3 : ARRAY[6] OF INTEGER
  BEGIN
    --set raster angle
    rast_ang = 90
    start_corner = 1

    -- draw_delta(rast_ang, (ZEROPOS(1)), 10)
    draw_multi(rast_ang, 3)

      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    query = paths__raster_neighbors(lines[45], TRUE, lines)

    FOR i=1 TO ARRAY_LEN(query) DO
      IF NOT UNINIT(query[i].idx) THEN
        act1[i] = query[i].idx
      ELSE
        act1[i] = 0
      ENDIF
    ENDFOR

    s_to_iarr('47,43,0,46,48,0', ',', exp1)

    query = paths__raster_neighbors(lines[23], TRUE, lines)

    FOR i=1 TO ARRAY_LEN(query) DO
      IF NOT UNINIT(query[i].idx) THEN
        act2[i] = query[i].idx
      ELSE
        act2[i] = 0
      ENDIF
    ENDFOR

    s_to_iarr('25,21,0,24,26,0', ',', exp2)

    query = paths__raster_neighbors(lines[5], TRUE, lines)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'neighbors for lines[' + i_to_s(5) + ']:')
%endif
    FOR i=1 TO ARRAY_LEN(query) DO
      IF NOT UNINIT(query[i].idx) THEN
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG, i_to_s(query[i].idx))
%endif
        act3[i] = query[i].idx
      ELSE
        act3[i] = 0
      ENDIF
    ENDFOR

    s_to_iarr('7,3,0,6,8,4', ',', exp3)

    query = paths__raster_neighbors(lines[5], TRUE, lines)

    RETURN(kunit_eq_ari(exp1, act1) AND kunit_eq_ari(exp2, act2) AND &
           kunit_eq_ari(exp3, act3) )

  END t_rast_neigh

ROUTINE t_rast_path : BOOLEAN
  VAR
    rast_ang : REAL
    start_corner : INTEGER
    start_nde : INTEGER
    i : INTEGER
    act1, exp1 : ARRAY[20] OF INTEGER
    act2, exp2 : ARRAY[20] OF INTEGER
    bbox : t_RECT
    apprch_pnt : t_VEC_PATH 
  BEGIN

    --set raster angle
    rast_ang = 0

    draw_delta(rast_ang, 10)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    tstpln__delete
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,rast_ang, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ONEWAY, FALSE, FALSE)
     --get start node
    start_corner = 1
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act1) DO
      act1[i] =  path_plan[i].v
    ENDFOR

    s_to_iarr('3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22', ',', exp1)

    --generate path
    tstpln__delete
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,rast_ang, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ZIGZAG, FALSE, FALSE)
    --get start node
    start_corner = 2
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act2) DO
      act2[i] =  path_plan[i].v
    ENDFOR

    s_to_iarr('8,7,6,5,4,3,9,10,11,12,13,14,16,15,17,18,20,19,21,22', ',', exp2)
    
    RETURN(kunit_eq_ari(exp1, act1) AND kunit_eq_ari(exp2, act2) )


  END t_rast_path

ROUTINE t_rast_multi : BOOLEAN
  VAR
    rast_ang : REAL
    start_corner : INTEGER
    start_nde : INTEGER
    i : INTEGER
    act1, exp1 : ARRAY[20] OF INTEGER
    act2, exp2 : ARRAY[20] OF INTEGER
    bbox : t_RECT
    apprch_pnt : t_VEC_PATH 
  BEGIN

    rast_ang = 0
    start_corner = 1
    draw_multi(rast_ang, 3)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,0, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ONEWAY, TRUE, TRUE)

     --get start node
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act1) DO
      act1[i] =  path_plan[i].v
    ENDFOR

    s_to_iarr('1,2,7,8,13,14,19,20,25,26,31,32,37,38,43,44,49,50,3,4', ',', exp1)

    --generate path
    rast_ang = 90
    start_corner = 1
    draw_multi(rast_ang, 3)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    tstpln__delete
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,0, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ONEWAY, TRUE, TRUE)

     --get start node
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)


    FOR i=1 TO ARRAY_LEN(act2) DO
      act2[i] = path_plan[i].v
    ENDFOR

    s_to_iarr('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20', ',', exp2)

    RETURN(kunit_eq_ari(exp1, act1) AND kunit_eq_ari(exp2, act2) )
  END t_rast_multi

ROUTINE t_rast_mult2 : BOOLEAN
  VAR
    rast_ang : REAL
    start_corner : INTEGER
    start_nde : INTEGER
    i : INTEGER
    act1, exp1 : ARRAY[20] OF INTEGER
    bbox : t_RECT
    apprch_pnt : t_VEC_PATH 
  BEGIN

    rast_ang = 0
    start_corner = 1
    draw_multi(rast_ang, 3)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,0, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ONEWAY, FALSE, FALSE)

     --get start node
    apprch_pnt = paths__new_vpath(bbox.verts[start_corner], PTH_STOP, 0, VEC(1,0,0))
    start_nde = tstpln__closest_point(apprch_pnt)
    tstpln__MST(start_nde)
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act1) DO
      act1[i] =  path_plan[i].v
    ENDFOR

    s_to_iarr('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20', ',', exp1)

    RETURN(kunit_eq_ari(exp1, act1))

  END t_rast_mult2


ROUTINE t_hexagon : BOOLEAN
  VAR
%define hex_radius 50
%define num_of_points 5
    rast_ang : REAL
    overlap : REAL
    wall_lines : INTEGER
    i : INTEGER
    act1, exp1 : ARRAY[20] OF INTEGER
    bbox : t_RECT
  BEGIN

    --set raster angle
    rast_ang = 0
    overlap = 6
    wall_lines = 0

    --draw hexagon
    tstpoly__init((ZEROPOS(1)), TRUE)
    tstpoly__hexagon(hex_radius, num_of_points, VEC2D(hex_radius, hex_radius), 0)
    tstpoly__set_params(rast_ang, -1, wall_lines, 0, overlap)
    tstpoly__raster(PTH_LINETO)

      --get bounding box
    bbox = tstpoly__get_bounding_box
      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    clear_list(path_plan)
    tstpln__init(lines, (ZEROPOS(1)))
    tstpln__raster_graph(ONEWAY, FALSE, FALSE)
     --get start node
    tstpln__MST(tstpln__closest_bounding_box(2))
    tstpln__get_plan(path_plan)

    FOR i=1 TO ARRAY_LEN(act1) DO
      act1[i] =  path_plan[i+12].v
    ENDFOR

    s_to_iarr('20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1', ',', exp1)
    
    RETURN(kunit_eq_ari(exp1, act1))

  END t_hexagon

ROUTINE t_temp : BOOLEAN
  VAR 
    rast_ang : REAL
    start_corner : INTEGER
    start_nde : INTEGER
    i : INTEGER
    act1, exp1 : ARRAY[20] OF INTEGER
    bbox : t_RECT
    apprch_pnt : t_VEC_PATH
  BEGIN

    rast_ang = 90
    start_corner = 1

    tstpoly__init((ZEROPOS(1)), TRUE)
    tstpoly__set_canvas(POS(0,0,0,0,0,rast_ang, (ZEROPOS(1).config_data) ))
    tstpoly__import_shape('FR:\rebel.csv')
    --raster polygon
    tstpoly__set_params(rast_ang, 1, 1, 0, 5)
    tstpoly__raster(PTH_LINETO)

      --get contours
    paths__clear_vecpath(lines)
    tstpoly__lines_to_vec_path(lines)

    --generate path
    clear_list(path_plan)
    tstpln__init(lines, POS(0,0,0,0,0,0, (ZEROPOS(1).config_data)))
    tstpln__raster_graph(ONEWAY, FALSE, TRUE)

    --get start node
    tstpln__MST(tstpln__closest_bounding_box(1))
    tstpln__get_plan(path_plan)

    RETURN(TRUE)
  END t_temp

-- **fix**
-- ..warning:: This function needs to be updated to new csv/layout
--             and pathplan->importPath syntax
--
-- ROUTINE t_import : BOOLEAN
-- %define CSV_PATH_NAME 'FR:slice0032.csv'
--   BEGIN
--     tstpln__raster_graph(ONEWAY, FALSE, TRUE)

--     --get start node
--     tstpln__MST(tstpln__closest_bounding_box(1))

--     paths__clear_vecpath(lines)
--     tstpln__get_path(lines)
--     tstpln__get_plan(path_plan)


--     RETURN(TRUE)
--   END t_import

BEGIN

%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, SHOW_DEBUG, TRUE)
  usrdis__clear_file
%endif
  kunit_test('test raster NN path plan', t_NN)
  -- ..issue:: kunit_test('test raster query', t_rast_neigh)
  kunit_test('test raster path', t_rast_path)
  kunit_test('test raster multi polygons', t_rast_multi)
  kunit_test('test raster multi polygon indep', t_rast_mult2)
  kunit_test('test raster hexagon poly', t_hexagon)
  kunit_test('test raster svg poly', t_temp)
  -- need to fix before use :: kunit_test('test import raster path', t_import)

  kunit_done

  --clean up
  tstpln__delete
  tstpoly__delete
  clear_list(path_plan)
  paths__clear_vecpath(lines)
  clear_poly(polygon)

%ifdef DEBUG_BUILD
  usrdis__write_pipe
  usrdis__delete
%endif


END test_pplan