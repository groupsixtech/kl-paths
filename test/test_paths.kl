PROGRAM test_paths
%NOLOCKGROUP

--include path class node type
%include usertypetest.klt
path_type_define(usrpth)
%undef path_type_define

--turntable type
%include rottypetest.klt
path_type_define(trot)
%undef path_type_define

-- turntable path structs
%define class_name trot
%include turntable.klt

--include standard path node type
%include std_pth_node.klt

VAR
  expect_path, act_path : PATH
  user_path  : PATH nodedata = POS_STRUCT  --define custom user path
  rot_path, rot_exp_path : PATH nodedata = ROT_STRUCT  --define turntable path

%from math.klh %import rand_position
%from display.klh %import clear, show
%from strings.klh %import s_to_xyzwpr, pose_to_s, joint_to_s, s_to_joint
%include kunit.klh
%from pose.klh %import set_xyzwpr_str, set_jointpos_str
%include paths.klh

--user type path
%class usrpth('paths.klc','paths_class.klh','usertypetest.klt')
--standard path type
%class stdpth('paths.klc','paths_class.klh','std_pth_node.klt')

--access to turntable paths
%class trot('turntable_paths.klc','turntable_paths.klh','rottypetest.klt')

ROUTINE t_append : BOOLEAN
  VAR 
    pose : XYZWPR
    strct : ARRAY[6] OF POS_STRUCT
    i, seed : INTEGER
  BEGIN
    usrpth__clear(user_path)

    -- get random positions
    GET_TIME(seed)
    FOR i=1 TO ARRAY_LEN(strct) DO
      strct[i].node_pos = math__rand_position(seed*i)
      -- append to path
      usrpth__append(strct[i], user_path)
    ENDFOR

    RETURN(kunit_eq_int(ARRAY_LEN(strct), PATH_LEN(user_path)))

  END t_append

ROUTINE t_hexagon : BOOLEAN
  CONST
    verticies = 5
  VAR
    pose : STD_PTH_NODE
    origin : XYZWPR
    i, length : INTEGER
    b : ARRAY[5] OF BOOLEAN
  BEGIN
    
    -- clear paths
    stdpth__clear(act_path)
    stdpth__clear(expect_path)

    --hexagon with a 300mm radius
    pose.node_pos = s_to_xyzwpr('300,0,0,0,0,0',',')
    stdpth__append(pose, expect_path)
    pose.node_pos =  s_to_xyzwpr('92.705,285.317,0,0,0,0',',')
    stdpth__append(pose, expect_path)
    pose.node_pos =  s_to_xyzwpr('-242.705,176.336,0,0,0,0',',')
    stdpth__append(pose, expect_path)
    pose.node_pos =  s_to_xyzwpr('-242.705,-176.336,0,0,0,0',',')
    stdpth__append(pose, expect_path)
    pose.node_pos =  s_to_xyzwpr('92.705,-285.317,0,0,0,0',',')
    stdpth__append(pose, expect_path)

    --initialize origin
    origin = pose__set_xyzwpr_str('0,0,0,0,0,0', 'F U T, 0, 0, 0')
    
    --make pentagon
    paths__hexagon(300.0, 5, origin, act_path)

    FOR i=1 TO ARRAY_LEN(b) DO
        --WRITE TPDISPLAY(CR,pose_to_s((act_path[i].node_pos), ','))
        b[i] = kunit_eq_pos((expect_path[i].node_pos), (act_path[i].node_pos))
    ENDFOR

    RETURN(b[1] AND b[2] AND b[3] AND b[4] AND b[5])

  END t_hexagon

ROUTINE t_rot_pad : BOOLEAN
  VAR
    pose : ROT_STRUCT
    param : tPAD
    index : tINDEX
    origin : ROT_STRUCT
    i : INTEGER
    status : INTEGER
    br,bt : ARRAY[4] OF BOOLEAN
  BEGIN
    --clear path
    trot__clear(rot_path)
    trot__clear(rot_exp_path)

    --band with a 50mm radius, 150mm z+ from the origin
    pose.t_xyz = s_to_xyzwpr('0.0,50.0,150.0,0.0,0.0,0.0',',')
    pose.t_joint = s_to_joint('0.0,0.0,0.0,0.0,0.0,0.0',',')
    trot__append(pose, rot_exp_path)
    pose.t_xyz = s_to_xyzwpr('50.0,-0.0,150.0,0.0,0.0,-90.0',',')
    pose.t_joint = s_to_joint('90.0,0.0,0.0,0.0,0.0,0.0',',')
    trot__append(pose, rot_exp_path)
    pose.t_xyz = s_to_xyzwpr('0.0,-50.0,150.0,0.0,0.0,-180.0',',')
    pose.t_joint = s_to_joint('180.0,0.0,0.0,0.0,0.0,0.0',',')
    trot__append(pose, rot_exp_path)
    pose.t_xyz = s_to_xyzwpr('-50.0,-0.0,150.0,0.0,0.0,90.0',',')
    pose.t_joint = s_to_joint('270.0,0.0,0.0,0.0,0.0,0.0',',')
    trot__append(pose, rot_exp_path)

    --initialize origin
    origin.t_xyz = pose__set_xyzwpr_str('0,0,0,0,0,0', 'F U T, 0, 0, 0')
    origin.t_joint = pose__set_jointpos_str('0.0')


    --set parameters
    param.radius = 50
    param.start_z = 150
    param.start_deg = 0
    param.passes = 1
    param.width_rot = 360


    --make band
    trot__npad(param, index, origin, rot_path)

    FOR i=1 TO PATH_LEN(rot_path) DO
      --WRITE TPDISPLAY(CR,pose_to_s((act_path[i].node_pos), ','))
        br[i] = kunit_eq_pos((rot_path[i].robot), (rot_exp_path[i].robot))
        bt[i] = kunit_eq_pos((rot_path[i].rotary), (rot_exp_path[i].rotary))
    ENDFOR

    RETURN(br[1] AND br[2] AND br[3] AND br[4] AND &
           bt[1] AND bt[2] AND bt[3] AND bt[4])

  END t_rot_pad

BEGIN
    --display__clear
    --WRITE TPDISPLAY(CR)

    -- total assersions 14
    kunit_test('test appending to path', t_append) -- assersions 1
    kunit_test('test make hexagon', t_hexagon) -- assersions 5
    kunit_test('test rotary pad path', t_rot_pad) -- assersions 8

    --display__show

    kunit_done
END test_paths