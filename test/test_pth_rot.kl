PROGRAM test_pth_rot
%NOBUSYLAMP
%COMMENT = 'test motion paths'
%NOPAUSE = COMMAND + TPENABLE + ERROR

%define TOOLING_STEP 6
%define LINKING_STEP 10
%define TOOLING_SPEED 50
%define LINKING_SPEED 100

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%include display.c.klt
%endif

%include systemlib.klt
%include systemvars.klt
%include draw.klt
%include pathplan.klt
%include paths.klt

--include motion type
%include defaultrot.klt
define_paths_types(PATH_DATA_TYPE, tstrot)

VAR
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH
  polygon : PATH nodedata = t_VERTEX
  ppath : PATH nodedata = t_POS_PATH
  path_plan : PATH nodedata = t_INTEGER
  pth : PATH nodedata = t_TOOLPATH

%from systemlib.klh %import VEC, VEC2D
%include pose.klh
%from math.klh %import bitmask
%from strings.klh %import i_to_s, p_to_s, pose_to_s
%from registers.klh %import set_real, set_int
%include paths.klh

--polygon object
%class tstpoly('polygon.klc', 'polygon.klh')
--path object
%class tstrot('paths.klc','pathclass.klh','defaultrot.klt')
define_paths_headers(tstrot)

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

ROUTINE clear_poly(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE clear_list(p : PATH nodedata = t_INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_list

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE draw_delta(rast_ang : REAL ; pitch : REAL; wall_lines : INTEGER)
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 8)   
    polygon[1].coords = VEC2D(-40,10)   
    polygon[2].coords = VEC2D(-10,40)   
    polygon[3].coords = VEC2D(0,0)
    polygon[4].coords = VEC2D(10,40)
    polygon[5].coords = VEC2D(40,10)
    polygon[6].coords = VEC2D(20,60)  
    polygon[7].coords = VEC2D(0,120)
    polygon[8].coords = VEC2D(-20,60)

    --initialize polygon object
    tstpoly__clear
    tstpoly__set_canvas((ZEROPOS(1)))
    tstpoly__append_polygon(polygon)

    --raster polygon
    tstpoly__set_params((rast_ang), 1, wall_lines, 0, pitch)
    tstpoly__raster(PTH_LINETO)

  END draw_delta


ROUTINE t_rot_OD
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 360
%define PAD_LENGTH 50
%defeval PAD_SEPERATION 0
%define PAD_START_DEG 0
%define PAD_START_DIST 100
%define NO_OF_PADS 1
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 90
%define LINKING_STEP 90
    i, status : INTEGER
    origin : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
    nde : XYZWPR
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
    tstpoly__new
    tstpoly__pads(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))

    --get raster lines
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    tstpoly__set_params(RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    tstpoly__raster(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstpoly__lines_to_vec_path(lines) ;

    cds = paths__new_coord_sys(PTH_CYLINDER, 3)
    nde = POS(0,0,0,TOOL_ORIENT_DOWN, pose__set_config(DEFAULT_CONFIG))
    tstrot__init(POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG)), &
                 nde, cds)
                
    tstrot__set_idod(PAD_IDOD)

    --generate path
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    bbox = tstpoly__get_bounding_box
    tstrot__createPath(lines, contours, origin, OD_CORNER, ONEWAY, FALSE)
    --move through path
    tstrot__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT))

    --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_path(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    RETURN
  END t_rot_OD


ROUTINE t_rot_ID
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 360
%define PAD_LENGTH 50
%defeval PAD_SEPERATION 0
%define PAD_START_DEG 180
%define PAD_START_DIST 100
%define NO_OF_PADS 1
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD -1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 20
%define LINKING_STEP 20
    i, status : INTEGER
    origin : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
    nde : XYZWPR
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
    tstpoly__new
    tstpoly__pads(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))

    --get raster lines
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    tstpoly__set_params(RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    tstpoly__raster(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstpoly__lines_to_vec_path(lines) ;

    cds = paths__new_coord_sys(PTH_CYLINDER, 3)
    nde = POS(0,0,0,TOOL_ORIENT_UP, pose__set_config(DEFAULT_CONFIG))
    tstrot__init(POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG)), &
                 nde, cds)
                
    tstrot__set_idod(PAD_IDOD)

    --generate path
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    bbox = tstpoly__get_bounding_box
    tstrot__createPath(lines, contours, origin, ID_CORNER, ONEWAY, FALSE)
    --move through path
    tstrot__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT) )

    --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_path(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)


    RETURN
  END t_rot_ID

BEGIN
%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__constructor(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif

  t_rot_OD
  -- t_rot_ID

  --clean up
  -- tstpoly__clear
  -- tstrot__destructor

%ifdef DEBUG_BUILD
  usrdis__write_pipe
  usrdis__destructor
%endif

END test_pth_rot